x2 = c(0,   0,  0,   0,   0, 1,   1,   1,  1,   1,   1,  0,   0,   0,   0, 0,   1,  1,   1,   1, 1),
N = 21)
init=list(list(alpha0 = 0, alpha1 = 0, alpha2 = 0, alpha12 = 0, tau = 10),
list(
alpha0 = 0, alpha1 = 0, alpha2 = 0, alpha12 = 0, tau = 1,
b = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
res1=jags(dat,init,parameters.to.save = c("alpha0","alpha1","alpha12","tau","sigma"),
model.file="seeds.txt",n.chains = 2,n.iter = 100000,n.burnin = 10000)
#Takes about 2 minutes
round(res1$BUGSoutput$summary,2)
Sys.time()
res1=jags(dat,init,parameters.to.save = c("alpha0","alpha1","alpha12","tau","sigma"),
model.file="seeds.txt",n.chains = 2,n.iter = 100000,n.burnin = 10000)
Sys.time()
startTime<-Sys.time()
res1=jags(dat,init,parameters.to.save = c("alpha0","alpha1","alpha12","tau","sigma"),
model.file="seeds.txt",n.chains = 2,n.iter = 100000,n.burnin = 10000)
Sys.time()-startTime
install.packages("rstan")
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.which("make")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(ggplot2)
library(R2jags)
library(ggplot2)
library(R2jags)
library(R2jags)
library(ggplot2)
library(R2jags)
library(ggmcmc)
library(BayesFactor)
library(INLA)
theme_set(theme_bw())
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(INLA)
library(INLA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("graph", "Rgraphviz"), dep=TRUE)
library(INLA)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
remove.packages(INLA)
remove.packages("INLA")
library(INLA)
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
library(graph)
library(Rgraphviz)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(cp)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=FALSE)
/usr/bin/cp --help
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.setenv(PATH = paste(Sys.getenv("PATH"),
"C:\\RTools42\\mingw64\\bin")
Sys.setenv(PATH = paste(Sys.getenv("PATH"),
"C:\\RTools40",
"C:\\RTools40\\mingw64\\bin",
sep = ";"))
Sys.getenv("PATH")
Sys.which("make")
Sys.which("cp")
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
Sys.getenv()
Sys.getenv("BINPREF")
Sys.which("make")
library(rstan)
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
Sys.which("cp")
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
Sys.getenv()
Sys.getenv("PATH")
?Sys.setenv
sys.getenv("bin")
Sys.getenv("PATH")
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
devtools::find_rtools(debug = TRUE)
install.packages("~/Downloads/INLA_22.04.16.tar.gz", repos = NULL, type = "source")
Sys.getenv()
library(MuMIn)
library(parallel)
dataGlobal<-data.frame(x=rnorm(20),y=rnorm(20))
cl2<-makeCluster(4)
setDefaultCluster(cl2)
#But not if I put it in a function
func1<-function(dataFunction) {
lmf1<-lm(y~x,data=dataFunction,na.action=na.fail)
clusterExport(cl2,varlist=list("dataFunction","lmf1"),envir = environment())
lmf2<-MuMIn::dredge.par(lmf1,cluster = cl2)
lmf2
}
func1(dataGlobal)
#But not if I put it in a function
func1<-function(dataFunction) {
lmf1<-lm(y~x,data=dataFunction,na.action=na.fail)
clusterExport(cl2,varlist=list("dataFunction","lmf1"),envir = environment())
lmf2<-MuMIn:::.dredge.par(lmf1,cluster = cl2)
lmf2
}
func1(dataGlobal)
library(JABBA)
?build_jabba
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(R2jags)
library(INLA)
library(ggplot2)
library(tidyverse)
theme_set(theme_bw())
##### Simulated fin data and poisson multinomial regression for Field et al. example
#####  Simulated data with 2 random effects, like Hong Kong fin data  ####################################
RB_Data<-read.csv("Rookery_Bay_Data.csv")
devtools::install_github("natureanalytics-ca/BycatchEstimator", force=TRUE)
#----------------------------------------------------------------------------------------------
# LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022
#----------------------------------------------------------------------------------------------
library(BycatchEstimator)
setupObj<-bycatchSetup(
modelTry = c("Lognormal","Delta-Lognormal","Delta-Gamma","TMBnbinom1","TMBnbinom2","TMBtweedie"),
obsdat = LLSIM_BUM_Example_observer,
logdat = LLSIM_BUM_Example_logbook,
yearVar = "Year",
obsEffort = "hooks",
logEffort = "hooks",
logUnsampledEffort = "unsampledEffort",
includeObsCatch  = TRUE,
matchColumn = "trip",
factorNames = c("Year","fleet","area","season"),
EstimateIndex = TRUE,
EstimateBycatch = TRUE,
logNum = NA,
sampleUnit = "trips",
complexModel = formula(y~Year+fleet+hbf+area+season+Year:area),
simpleModel = formula(y~Year+fleet+area),
indexModel = formula(y~Year+area),
baseDir = getwd(),
runName = "LLSIMBUMtrip2022Aprilobs05mc",
runDescription = "LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022",
common = c("Swordfish","Blue marlin")[2],
sp = c("Xiphias gladius","Makaira nigricans")[2],
obsCatch = c("SWO","BUM")[2],
catchUnit = "number",
catchType = "catch"
)
getwd()
bycatchFit(
setupObj = setupObj,
selectCriteria = "BIC",
DoCrossValidation = TRUE,
DredgeCrossValidation = FALSE,
ResidualTest = FALSE,
CIval = 0.05,
VarCalc = "Simulate",
useParallel = TRUE,
nSims = 1000,
baseDir = getwd(),
plotValidation = FALSE,
trueVals = NULL,
trueCols = NULL
)
install.packages(c("cli", "cplm", "dplyr", "fda", "ggplot2", "knitr", "pcaPP", "quantreg", "rrcov", "testthat", "tibble"))
install.packages(c("quantreg", "tibble"))
#----------------------------------------------------------------------------------------------
# LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022
#----------------------------------------------------------------------------------------------
library(BycatchEstimator)
setupObj<-bycatchSetup(
modelTry = c("Lognormal","Delta-Lognormal","Delta-Gamma","TMBnbinom1","TMBnbinom2","TMBtweedie"),
obsdat = LLSIM_BUM_Example_observer,
logdat = LLSIM_BUM_Example_logbook,
yearVar = "Year",
obsEffort = "hooks",
logEffort = "hooks",
logUnsampledEffort = "unsampledEffort",
includeObsCatch  = TRUE,
matchColumn = "trip",
factorNames = c("Year","fleet","area","season"),
EstimateIndex = TRUE,
EstimateBycatch = TRUE,
logNum = NA,
sampleUnit = "trips",
complexModel = formula(y~Year+fleet+hbf+area+season+Year:area),
simpleModel = formula(y~Year+fleet+area),
indexModel = formula(y~Year+area),
baseDir = getwd(),
runName = "LLSIMBUMtrip2022Aprilobs05mc",
runDescription = "LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022",
common = c("Swordfish","Blue marlin")[2],
sp = c("Xiphias gladius","Makaira nigricans")[2],
obsCatch = c("SWO","BUM")[2],
catchUnit = "number",
catchType = "catch"
)
bycatchFit(
setupObj = setupObj,
selectCriteria = "BIC",
DoCrossValidation = TRUE,
DredgeCrossValidation = FALSE,
ResidualTest = FALSE,
CIval = 0.05,
VarCalc = "Simulate",
useParallel = TRUE,
nSims = 1000,
baseDir = getwd(),
plotValidation = FALSE,
trueVals = NULL,
trueCols = NULL
)
AICc
??AICc
library(MuMIn)
bycatchFit(
setupObj = setupObj,
selectCriteria = "BIC",
DoCrossValidation = TRUE,
DredgeCrossValidation = FALSE,
ResidualTest = FALSE,
CIval = 0.05,
VarCalc = "Simulate",
useParallel = TRUE,
nSims = 1000,
baseDir = getwd(),
plotValidation = FALSE,
trueVals = NULL,
trueCols = NULL
)
#Generate probability of being sampled from BUM catch
#p1 is the desired mean coverage and p2 is the minimum
#probability of being sampled, x is the catch
func1<-function(p1,p2,x) {
m=mean(x)
M=max(x)
b=(log(p1/(1-p1))-log(p2/(1-p2)))/(m-M)
a=log(p1/(1-p1))-b*m
plot(seq(0,M,.1),1/(1+exp(-(a+b*seq(0,M,.1)))),xlab="Catch",ylab="Probability of observation",type="l")
1/(1+exp(-(a+b*x)))
}
library(ggplot2)
func1(0,1,1:10)
func1(0.1,1,1:10)
#Generate probability of being sampled from BUM catch
#p1 is the desired mean coverage and p2 is the minimum
#probability of being sampled, x is the catch
func1<-function(p1,p2,x) {
m=mean(x)
M=max(x)
b=(log(p1/(1-p1))-log(p2/(1-p2)))/(m-M)
a=log(p1/(1-p1))-b*m
plot(seq(0,M,.1),1/(1+exp(-(a+b*seq(0,M,.1)))),xlab="Catch",ylab="Probability of observation",type="l")
1/(1+exp(-(a+b*x)))
}
func1(1,0,1:10)
func1(1,0,rnorm(100,100,1))
func1(.1,0.01,rnorm(100,100,1))
func1(.1,0.01,runif(100,0,1))
func1(0.1,0.01,runif(100,0,1))
func1(1,0,runif(100,0,1))
func1(1,0.001,runif(100,0,1))
func1(0.999,0.001,runif(100,0,1))
func1(0.999,0.001,runif(1000,0,1))
func1(0.5,0.001,runif(1000,0,1))
x<-func1(0.5,0.001,runif(1000,0,1))
summary(x)
df1<-data.frame(x=runif(1000,0,1))
df1$p<-fun1(df1$x)
df1$p<-func1(df1$x)
df1$p<-func1(.5,0.01,df1$x)
ggplot(df1,aes(x=x,y=p))+geom_point()
summary(df1)
df1$p<-func1(.05,0.01,df1$x)
ggplot(df1,aes(x=x,y=p))+geom_point()
summary(df1)
ggplot(df1,aes(x=x,y=p))+geom_point()+geom_vline(xintercept=0.5)
ggplot(df1,aes(x=x,y=p))+geom_point()+geom_vline(xintercept=0.5)+geom_hline(yintercept=0.05)
library(ggbiplot)
0.457*0.084 +0.542*0.083
1-0.00023
#----------------------------------------------------------------------------------------------
# LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022
#----------------------------------------------------------------------------------------------
library(BycatchEstimator)
install.packages("repmis")
FinDataFull <- repmis::source_DropboxData("fin_research_note.csv",
"exh4iobbm2p5p1v",
sep = ",",
header = TRUE)
FinDataFull <- repmis::source_DropboxData("fin_research_note.csv",
"exh4iobbm2p5p1v",
sep = ",",
header = TRUE)
library(repmis)
library(BayesFactor)
bf<-proportionsBF(28603,66728)
bf<-proportionBF(28603,66728,p=0.5)
bf
M=66728
F=28603
bf<-proportionBF(M,F,p=0.5)
bf
rm(M)
rm(F)
MM=66728
FF=28603
bf<-proportionBF(M,F,p=0.5)
bf<-proportionBF(MM,FF,p=0.5)
bf<-proportionBF(MM,FF,p=0.5)
?proportionBF
bf<-proportionBF(MM,FF+MM,p=0.5)
bf
bf<-proportionBF(MM,FF+MM,p=0.5)
bf
?contingencyTableBF
bf<-contingencyTableBF(c(FF,MM))
chisq.test(c(MM,FF))
x<-chisq.test(c(MM,FF))
y<-matrix(c(x$observed,x$expected),2,2)
y
bf<-contingencyTableBF(y,"jointMulti",)
bf
bf<-contingencyTableBF(matrix(c(MM,FF),2,1),"jointMulti",)
MM=56
FF=74
bf<-proportionBF(MM,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
MM=66728
FF=28603
MM=56
FF=74
bf<-proportionBF(MM,FF+MM,p=0.5)
bf
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
library(BayesFactor)
MM=66728
FF=28603
MM=56
FF=74
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
y<-matrix(c(x$observed,x$expected),2,2)
y
x<-chisq.test(c(MM,FF))
x
MM=56
FF=74
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
library(R2jags)
write("model {
chisq<-2.4923
k~dunif(0.01,100)
chisq~dchisq(k)
")
setwd("~/Downloads")
write("model {
chisq<-2.4923
k~dunif(0.01,100)
chisq~dchisq(k)
","temp.txt")
x<-jags(list(),list(),model.file = "temp.txt")
x<-jags(list(),list(),model.file = "temp.txt",parameters.to.save="k")
x<-jags(list(),model.file = "temp.txt",parameters.to.save="k")
write("model {
chisq<-2.4923
k~dunif(0.01,100)
chisq~dchisq(k)
}","temp.txt")
x<-jags(list(),model.file = "temp.txt",parameters.to.save="k")
x<-jags(list(chisq=2.4923),model.file = "temp.txt",parameters.to.save="k")
?jags
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
}","temp.txt")
x<-jags(list(chisq=2.4923),model.file = "temp.txt",parameters.to.save="k")
x$BUGSoutput$summary
x<-jags(list(chisq=2.4923),model.file = "temp.txt",parameters.to.save=c("k","pval"))
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
x<-jags(list(chisq=2.4923),model.file = "temp.txt",parameters.to.save=c("k","pval"))
x$BUGSoutput$summary
x<-jags(list(chisq=2.49),model.file = "temp.txt",parameters.to.save=c("k","pval"))
x$BUGSoutput$summary
x<-chisq.test(c(MM,FF))
x
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
MM=66728
FF=28603
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
MM=703
FF=721
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
MM=66728
FF=28603
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
write("model {
k~dunif(0.01,1000)
chisq~dchisqr(k)
pval<-step(k-1)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
write("model {
k~dunif(0.01,1000)
chisq~dchisqr(k)
chisqrep~dchisqr(1)
pval<-step(chisq-chisqrep)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
chisqrep~dchisqr(1)
pval<-step(chisq-chisqrep)
}","temp.txt")
library(BayesFactor)
library(R2jags)
MM=56
FF=74
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
chisqrep~dchisqr(1)
pval<-step(chisq-chisqrep)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
write("model {
k~dunif(0.01,100)
chisq~dchisqr(k)
chisqrep~dchisqr(1)
pval2<-step(k-1)
pval<-step(chisq-chisqrep)
}","temp.txt")
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval"))
y$BUGSoutput$summary
y<-jags(list(chisq=x$statistic),model.file = "temp.txt",parameters.to.save=c("k","pval","pval2"))
y$BUGSoutput$summary
MM=56
FF=74
bf<-proportionBF(FF,FF+MM,p=0.5)
bf
x<-chisq.test(c(MM,FF))
x
bf<-contingencyTableBF(c(MM,FF))
?contingencyTableBF
install.packages("pkgdown")
library(pkgdown)
use_pkgdown()
usethis::use_pkgdown()
libary(usethis)
library(usethis)
setwd("~/Documents/GitHub/BycatchEstimator/vignettes")
pkgdown::build_site()
?anovaBF
