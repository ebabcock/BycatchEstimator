[{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bycatch-Estimator User Guide","text":"BycatchEstimator tool runs generic model-based bycatch estimation procedure, first set data inputs specifications. code can estimate total bycatch, calculated expanding sample, observer database, total effort logbooks landings records, annual index abundance, calculated observer data. code runs best RStudio. running code first time, install latest versions R RStudio. output figures tables printed pdf file using R Markdown knitr library, outputs LaTex file; therefore, must LaTex program installed, TinyTex. R code estimates total bycatch follows. First, mean catch per unit effort (CPUE) observed sample units (trips example, sets) estimated linear model predictor variables. observation error models used delta-lognormal, delta-gamma, negative binomial (either glm.nb MASS library glmmTMB, nbinom1 nbinom2) Tweedie (cpglm glmmTMB). comparison, simple normal lognormal models also available, although methods expected perform well many zero bycatch observations. Within observation error model group, potential predictor variables chosen based user’s choice information criteria (AICc, AIC BIC) (MuMIn). user specifies complex simplest model, intermediate models considered. user-specified simplest model usually include year, can also include, example, stratification variables used observer program sampling design. model lowest value information criterion chosen best within observation error group. best candidate models observation error group compared using 10-fold cross validation, desired, see observation error model best predicts CPUE. Note information criteria can used directly compare, example, delta-lognormal negative binomial Tweedie, observation error models different y data. However, models can used predict CPUE directly, predictions can compared cross validation. best model according cross validation one lowest root mean square error (RMSE) predicted CPUE mean error () closest zero, excluding consideration models fit well according criteria described . Note model selection using information criteria cross validation intended guide. user also look information criteria across multiple models, well residuals diagnostics, may want choose different model bycatch estimation abundance index calculation based criteria, design observer sampling program. best model observation error model group (according selected information criterion), total bycatch estimated predicting catch logbook trips (.e., whole fishery) fitted model summing across trips. option predict bycatch unobserved effort (.e. trips sets sampled observers) calculate total bycatch observed bycatch plus predicted bycatch unobserved effort. works possible match observed trips logbook trips, amount observed effort trip always less equal amount total effort. fisheries high observer coverage (e.g. 20% ), predicting bycatch unobserved effort preferred, treating whole fishery unobserved might overestimate variance. catch trip predicted directly negative binomial models. Tweedie normal models predict CPUE, multiplied effort. Delta-lognormal delta-gamma models separate components probability positive CPUE CPUE, must multiplied together (appropriate bias corrections) multiplied effort get total catch. Catch trip summed across trips get total catch year. variance prediction trip calculated variance prediction interval, variance estimated mean prediction plus residual variance. predicted catches logbook trip dependent linear model coefficients, across multiple trips, trips independent; thus, variances added without accounting covariance. variance total catch year thus calculated either using Monte Carlo simulation, using delta method. Users may also chose estimate variances large logbook datasets methods work. case unobserved bycatch estimated, observed bycatch added predictions known constant variance. Monte Carlo variance estimation method, first draw random values linear model coefficients multivariate normal distribution mean variance/covariance matrix estimated model. predictions trip drawn draw parameters using appropriate probability density function (e.g. Tweedie, negative binomial) additional parameters (e.g. residual variance, negative binomial dispersion, Tweedie power phi) estimated model. Trips summed year (adding observed catch necessary) within draw, mean, standard error, quantiles (e.g. 2.5% 97.5% 95% confidence interval) calculated across Monte Carlo draws. approximation total variance predicted bycatch can also made using delta method. delta method approximates variance function variable derivative function squared times variance original variable. Thus, variance prediction intervals original data scale calculated pre post multiplying derivative inverse link function variance covariance matrix predicted values. \\[\\Sigma_p = J \\Sigma_l J'  \\] \\(\\Sigma_l\\) variance covariance matrix predicted trips stratum scale log link, J matrix derivatives. See function MakePredictionsDeltaVar bycatchFunctions.R details model type. code partly based method developed https://stackoverflow.com/questions/39337862/linear-model--lm---get-prediction-variance--sum--predicted-value. logbook data aggregated across multiple trips (e.g. strata) effort allocated equally trips row logbook data table purpose simulating catches estimating variances using delta method. allocation procedure needed estimate mean total bycatch, necessary estimate variances correctly. using aggregated effort, yet possible include observed catches known. model can estimate bycatch abundance indices multiple species dispositions (e.g. dead discard, live release) fishery simultaneously estimated data sets. user requests annual abundance index, calculated models selected bycatch estimation, option specify simplest model considered.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"data-specification","dir":"Articles","previous_headings":"","what":"Data specification","title":"Bycatch-Estimator User Guide","text":"provides guidance summarizes arguments function bycatchSetup observer data aggregated appropriate sample unit, either trips sets. Effort must units data sets (e.g. sets hook-hours). logbook data may aggregated sample units, may aggregated , long includes data stratification predictor variables. example, data can aggregated year, region season stratification variables, can aggregated trip. environmental variables, depth, included, logbook data probably entered set level. observer data columns year predictor variables, observed effort observed bycatch catch per trip species estimated. logbook data must also year predictor variables, total effort units (e.g. sets hook-hours) observer data. also column reports many sample units (.e. trips) included row logbook data data aggregated. needed predict catches trip variance calculations. NA values variables, rows deleted data set. include observed catches known totals, necessary include column unsampled effort logbook data (can zero completely sampled trips) column logbook observer data can used match observed trips logbook records. Next, give names variables observer (estimating bycatch) logbook data files. must also specify common scientific names species analyzed, units bycatch estimates (e.g. kg, numbers), type catch (e.g. retained catch, dead discards, live releases). analyzing one species disposition type, inputs must vectors length number species /disposition types. calculating catch sum observed catch predicted catch unobserved effort (includeObsCatch=TRUE) must columns total effort unsampled effort logbook data, column match observed trips logbook trips. Give formulas complex simplest model considered. simplest model requires stratification variables year, summaries predicted bycatch level stratification variables printed .csv files, plotted automatically. Abundance indices calculated including variables requested indexVars, allow different indices different stratification variables desired (e.g. different spatial areas). may also specify predictor variables interpreted factor (categorical). named variables converted factor analysis. Note year may either number factor. year number, model y ~ Year estimate linear trend across years. Polynomial regression may useful way estimate complex trends across years data sets years enough data estimate Year categorical fixed effect. can specified , example y ~ Year + (Year^2) + (Year^3).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model specification","title":"Bycatch-Estimator User Guide","text":"provides guidance summarizes arguments function bycatchFit First, specify models try information criterion use narrowing predictor variables use observation error model group. Model selection done dredge function MuMIn library(MuMIn). Note tweedie outputs whether using TMB (TweedieTMB) cpglm function (Tweedie). negative binomial 2 TMB negative binomial glm.nb. get faster results, use TMB distributions. included comparison. Also, specify whether cross validation choose observation error models, whether use dredge function use information criteria choose best set predictor variables fold cross validation. DredgeCrossValidation FALSE, predictor variables used fold, selected full data set. saves time large data sets. variable ResidualsTest allows excluding cross validation model residuals P<0.01 Kolmogorov Smirnov test whether residuals distributed expected likelihood (testUniformity DHARMa). useful excluding poorly performing models. However, may restrictive none models perform well, works small datasets. Specify confidence levels desired total bycatch calculations. variable useParallel true computer multiple cores, dredge function run parallel. greatly speeds calculations. trouble getting work, set useParallel FALSE. Finally, information total bycatch year validate estimates, example simulation study, fill arguments plotValidation, trueVals, trueCols. Otherwise, set arguments FALSE, NULL NULL, respectively. include validation data, trueVals set equal character string containing filename (complete path) file containing column labelled “Year”, columns total bycatch year, names specified trueCols. multiple species, trueCols can vector giving names column species order.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"reviewing-the-model-setup","dir":"Articles","previous_headings":"","what":"Reviewing the model setup","title":"Bycatch-Estimator User Guide","text":"running function bycatchSetup, data summaries output directories named “output” followed specified run name. pdf file summaries species (DataSummary.pdf) placed main output folder, csv file species placed output file named species. Note records NA catch effort variable excluded analysis included estimated sample size. years data, positive observations, may want exclude years analysis. summary table also counts number outliers (defined data points 8 standard deviations mean) outliers cause problems fitting models. data-checking, output file also includes columns estimated bycatch variance using simple unstratified ratio estimator year (See BycatchFunctions.r functions). get error message variables specified models found data frame.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"main-analysis","dir":"Articles","previous_headings":"","what":"Main analysis","title":"Bycatch-Estimator User Guide","text":"section explains use function bycatchFit run CPUE models, estimate total bycatch /abundance indices, cross validation requested. can ignore warnings information models long code keeps running. information variables tried models converged, summarized output files. model may slow large data set cross validation. outputs go directories labeled species names, include pdf results, separate csv files tables. models fit, code keeps track whether model converged correctly, , went wrong. output table called modelFail.csv summarizes results, “-” models converged successfully, “data” models fit due insufficient data (positive observations year prevents fitting delta models), “fit” models failed converge, “cv” models produced results unreasonably high CVs (>10) annual catch predictions, “resid” models failed Kolmogorov Smirnoff test correct distribution DHARMa library (DHARMa), residualTest TRUE. Models fail ways discarded used cross validation. get one errors model want use, check data missing combinations predictor variables, extreme outliers, years positive observations.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"finding-best-approximating-models","dir":"Articles","previous_headings":"Main analysis","what":"Finding best approximating models","title":"Bycatch-Estimator User Guide","text":"first section code includes two loops go models modelTry find best model using specified information criterion. first loop runs models applied data together (.e. delta models). delta models run separately second loop require different data setup. function called findBestModelFunc, applies dredge function MuMin library find best combination predictor variables according specified information criteria (MuMIn). dredge function produces table includes information criteria model considered, well model weights calculated information criterion user specified, sum one indicate degree support model data. best model highest weight. , cases models also strong support, perhaps considered, particularly simpler. current version code use MuMIn’s model averaging function, may worth considering several models similar weights. binomial model tried requested, either delta-lognormal delta-gamma model requested, since delta models binomial component. binomial models fitted using glm function logit link. negative binomial run using glm.nb function MASS library (MASS) nbinom1 nbinom2 glmmTMB library(glmmTMB). glm.nb function similar nbinom2 method glmTMB, included comparison. define variance negative binomial : \\[\\sigma^2=\\mu+\\mu^2/\\theta\\], \\(\\theta\\) estimated parameter. nbinom1, variance defined : \\[\\sigma^2= \\mu(1+\\alpha)\\], \\(\\alpha\\) estimated parameter. version negative binomial model, equivalent quasi-Poisson model, gives somewhat different results negative binomial models. negative binomial predicts integer counts, appropriate predicting bycatch numbers per trip trips logbook data. allow model also used catch bycatch measured weights, code rounds catches integers running model. Check appropriate units using. predict CPUE necessary include offset model. use log link three negative binomial models, model predicts: \\[log(C_i)=b_0+ b_1x_1+offset(log(E_i))\\] \\(C_i\\) catch trip \\(\\) observer data, \\(b_0+ b_1x_1\\) example linear predictor intercept slope, offset log effort \\(E_i\\) trip. algebraically equivalent modeling CPUE function linear predictor (without offset). Tweedie distribution available using cpglm function cplm library (cplm) Tweedie family glmmTMB (glmmTMB) including “Tweedie” “TMBtweedie” modelTry. Tweedie generalized function estimates distribution similar gamma distribution, except allows extra probability mass zero. thus appropriate continuous data extra zeros. uses log link, , addition linear predictor log(mean) estimates index parameter \\(p\\) dispersion parameter \\(\\phi\\) together determine shape distribution. years least one positive observation, code next runs lognormal gamma models requested. delta lognormal model, CPUE log transformed, mean CPUE positive observations modeled lm function positive data . delta-gamma method, log link used model positive CPUE values, using glm function. lognormal gamma method similar, except run CPUE data, including zeros, adding constant 0.1.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"model-residuals-and-residual-diagnostics","dir":"Articles","previous_headings":"Main analysis","what":"Model residuals and residual diagnostics","title":"Bycatch-Estimator User Guide","text":"next section loops models , calculates model residuals, residual diagnostics DHARMa library (DHARMa), , requested, calculations total bycatch index abundance. best model (according information criterion) observation error model group, ordinary residuals DHARMa scaled residuals plotted, DHARMa diagnostics calculated. DHARMa library uses simulation generate scaled residuals based specified observation error model results clearly interpretable ordinary residuals non-normal models. DHARMA draws random predicted values fitted model generate empirical predictive density data point calculates fraction empirical density greater true data point. Values 0.5 expected, values near 0 1 indicate mismatch data model. Particularly binomial negative binomial models, ordinary residuals normally distributed, DHARMa residuals better representation whether data consistent assumed distribution. regular residuals DHARMa residuals appropriate lognormal gamma models, since model continuous data expected approximately normal transformed link function. DHARMA residuals uniformly distributed, indicated QQUniform plot Kolmogorov-Smirnov test uniformity. DHARMA residuals show significant -dispersion model appropriate. summary DHARMa residual diagnostics added table called residualTab, models fail Kolmogorov-Smirnov test uniformity DHARMa scaled residuals excluded cross validation residualTest TRUE. cpglm functions produce estimates standard error, simulation used generate DHARMa residuals “Tweedie” model selected, using rtweedie distribution tweedie library (tweedie).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"bycatch-and-abundance-index-calculation","dir":"Articles","previous_headings":"Main analysis","what":"Bycatch and abundance index calculation","title":"Bycatch-Estimator User Guide","text":"model group best model, selected information criteria, used predict mean variance total bycatch year exception binomial, model predicts total number positive trips. binomial model, best model used predict probability positive observation logbook trip summed get total number positive trips year (stratum stratification requested). number positive trips calculated , rare species never caught trip, number positive trips good estimate total bycatch many models fail converge. common species, estimates total catch appropriate, results binomial model alone included cross validation model comparison. abundance index based binomial distribution also calculated, requested. model types, functions makePredictionSimVar, makePredictionDeltaVar makePredictionNoVar (depending selected variance calculation method) calculate total bycatch year, first predicting total catch trip logbook data summing trips stratum. negative binomial models, log(effort) logbook trips used offset predictions, along values predictor variables, model can predict bycatch trip directly. Tweedie, normal, gamma models CPUE predicted trip logbook data must multiplied effort summed across trips get annual summaries. delta-gamma models, predicted bycatch trip predicted probability positive observation binomial, times predicted CPUE gamma model, times effort trip. delta-lognormal models, variance predicted CPUE needed bias-correct converting mean predicted log(CPUE) mean predicted CPUE. variance prediction interval trip calculated variance estimated mean plus residual variance, value used bias correction. total predicted CPUE predicted probability positive observation binomial times predicted positive CPUE, predicted catch predicted CPUE times effort. models, predicted total catches summed across trips get totals stratum. variance calculated using Monte Carlo simulation method described using delta method. delta method variance available delta-lognormal delta-gamma models. user requests annual abundance index, also calculated best model model group. annual abundance index calculated setting variables year, variables required included index (e.g. region fleet) reference level, mean numerical variables common value categorical variables. index calculated predicting mean CPUE year, standard error calculated standard error mean prediction. delta-lognormal delta-gamma models standard error prediction calculated means standard errors binomial positive catch models using method Lo. Finally, section combines bycatch estimates index estimates data frames, prints CSV files DHARMa residual diagnostics. P values Kolmogorov-Smirnoff test whether DHARMa residuals uniformly distributed expected, test -dispersion, test zero-inflation (meaningless delta models, helpful see negative binomial tweedie models adequately model zeros) test whether outliers expected.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"cross-validation","dir":"Articles","previous_headings":"Main analysis","what":"Cross validation","title":"Bycatch-Estimator User Guide","text":"next part runs cross validation requested. observation error models converged produced reasonable results complete data set used cross validation. example, enough positive observations years estimate delta-lognormal delta-gamma models, included cross validation. cross validation, observer data randomly divided 10 folds. fold left one time models fit 9 folds. procedure described used find best model within observation error group using information criteria MuMIn library DredgeCrossValidation TRUE; otherwise, variables used fold full data set save time. fitted model used predict CPUE left fold, root mean square error calculated : \\[RMSE =\\frac{1}{n}\\sum_{=1}^{n}(\\hat{y_i}-y_i)^2\\] n number observed trips y CPUE data left-tenth observer data, \\(\\hat{y}\\) CPUE predicted model fitted 9/10th observer data. model lowest mean RMSE across 10 folds selected best model. Mean error () also calculated indicator whether model systematic bias. \\[=\\frac{1}{n}\\sum_{=1}^{n}\\hat{y_i}-y_i\\]","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"final-results-markdown","dir":"Articles","previous_headings":"Main analysis","what":"Final results markdown","title":"Bycatch-Estimator User Guide","text":"last section code saves results file, uses markdown make output files print graphics tables. R markdown file prints .pdf file figures tables output directory species labeled species disposition code (e.g. SimulatedSpeciesDeadDiscardResults.pdf). results may needed. However, want look closely specific model result, whether selected information criteria cross validation, outputs printed .csv files folders listed species. total bycatch figures individual model show analytical estimate total bycatch, mean across Monte Carlo draws. similar, may different years small sample sizes, due sampling error.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Bycatch-Estimator User Guide","text":"Although code automates much process model selection, recommended final model used without looking closely outputs. selected model must good fits reasonably consistent data according DHARMa residuals. results appear reasonable around scale ratio estimator results. model overly complex. Also, look model selection table see models also supported data.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elizabeth Babcock. Author, maintainer. William Harford. Contributor.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Babcock E (2022). BycatchEstimator: Generic Model-Based Bycatch Estimation Procedure. R package version 0.0.0.9000, https://ebabcock.github.io/BycatchEstimator/.","code":"@Manual{,   title = {BycatchEstimator: Generic Model-Based Bycatch Estimation Procedure},   author = {Elizabeth Babcock},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://ebabcock.github.io/BycatchEstimator/}, }"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"bycatchestimator-","dir":"","previous_headings":"","what":"Generic Model-Based Bycatch Estimation Procedure","title":"Generic Model-Based Bycatch Estimation Procedure","text":"BycatchEstimator used estimate total bycatch, calculated expanding sample, observer database, total effort logbooks landings records, annual index abundance, calculated observer data. BycatchEstimator uses model-based procedure estimate total annual bycatch expanding sample, observer database, relation total effort logbooks landings records. framework can also used estimate annual index abundance, calculated observer data. Using tool, bycatch estimation fitting generalized linear models based user-defined statistical distributions observation error models (e.g. delta-lognormal, negative binomial) predictor variables (e.g., year, season, depth). complexity task identifying best approximating model addressed semi-automated model selection process based user’s choice information criteria (AICc, AIC BIC). Cross validation may used selectthe best observation error model across. best approximating modelis identified, standardized CPUE model used predict total bycatch logbook trips (alternatively, unobserved trips)summing across trips. bycatch estimation tool developed accessible R package.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generic Model-Based Bycatch Estimation Procedure","text":"code runs best R studio. running code first time, install latest versions R RStudio. output figures tables printed pdf file using R Markdown knitr library, outputs LaTex file; therefore, must LaTex program installed, TinyTex. can install development version BycatchEstimator GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ebabcock/BycatchEstimator\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Due complication coding, user must load library(MuMIn) addition library(BycatchEstimator).","code":"library(BycatchEstimator) library(MuMIn)"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"llsim-example","dir":"","previous_headings":"","what":"LLSIM Example","title":"Generic Model-Based Bycatch Estimation Procedure","text":"demonstrate use, example data sets included R package. example, use data sets LLSIM (Goodyear 2021).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"logbook-data","dir":"","previous_headings":"LLSIM Example","what":"Logbook data","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Simulation longline fleets LLSIM conducted using three idealized fleets described Goodyear (2021). fleets USA-like fleet (fleet 1), Japan-like fleet (fleet 2) Brazil-like fleet (fleet 3). simulated data set included three fleets, data spanning 1990 2018 reflect approximate period observer coverage established. species distribution model (SDM) longline simulator (LLSIM) generates 3-dimensional distribution blue marlin swordfish throughout Atlantic Ocean based habitat preferences species. Simulated longline sets generated distributing hooks throughout habitat species, consistent distribution, gear, hooks floats, use lightsticks characteristics historical longline fishing fleets. LLSIM initially produces set-level catches, logbooks observer databases allocated trips example. Sets allocated trip gear, month spatial area (5 x 5 squares). Trips 100 sets randomly allocated different trips median trips 20 sets. example, sample unit trips, observer logbook data single line per trip.","code":"LLSIM_BUM_Example_logbook"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"observer-program-data","dir":"","previous_headings":"LLSIM Example","what":"Observer program data","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Observer program data generated passing trip-level logbook data observer program sub-model. observer sub-model assumes observer coverage randomly assigned trips, 5% coverage trips. entire trip assumed observed.","code":"LLSIM_BUM_Example_observer"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"model-setup","dir":"","previous_headings":"LLSIM Example","what":"Model setup","title":"Generic Model-Based Bycatch Estimation Procedure","text":"first step bycatch estimation set input file review verify data. Notice returned value bycatchSetup assigned object used subsequent step. step also produces output saved working directory user review. Review essential ensure data correctly formatted interpreted model setup. particular, make sure years observations species interest, prevent models working correctly.","code":"setupObj<-bycatchSetup(   #modelTry = c(\"Lognormal\",\"Delta-Lognormal\",\"Delta-Gamma\",\"TMBnbinom1\",\"TMBnbinom2\",\"TMBtweedie\"),   modelTry = c(\"Delta-Lognormal\", \"TMBnbinom2\"),   obsdat = LLSIM_BUM_Example_observer,   logdat = LLSIM_BUM_Example_logbook,   yearVar = \"Year\",   obsEffort = \"hooks\",   logEffort = \"hooks\",   logUnsampledEffort = \"unsampledEffort\",   includeObsCatch  = TRUE,   matchColumn = \"trip\",   factorNames = c(\"Year\",\"fleet\",\"area\",\"season\"),   EstimateIndex = TRUE,   EstimateBycatch = TRUE,   logNum = NA,   sampleUnit = \"trips\",   complexModel = formula(y~Year+fleet+hbf+area+season),   simpleModel = formula(y~Year+fleet+area),   indexModel = formula(y~Year+area),   baseDir = getwd(),   runName = \"LLSIMBUMtrip2022Aprilobs05mc\",   runDescription = \"LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022\",   common = c(\"Swordfish\",\"Blue marlin\")[2],   sp = c(\"Xiphias gladius\",\"Makaira nigricans\")[2],   obsCatch = c(\"SWO\",\"BUM\")[2],   catchUnit = \"number\",   catchType = \"catch\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"optional-step","dir":"","previous_headings":"LLSIM Example","what":"Optional step","title":"Generic Model-Based Bycatch Estimation Procedure","text":"output produced step one includes object returned bycatchSetup. naming convention object ends _BycatchModelSpecification.rds, shown . Thus, model setup can stored later retrieved analysis.","code":"setupObj<-readRDS(file=paste0(getwd(), paste(\"/Output\", \"LLSIMBUMtrip2022Aprilobs05mc\"),\"/\", \"2022-05-02\",\"_BycatchModelSpecification.rds\"))"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"model-fitting","dir":"","previous_headings":"LLSIM Example","what":"Model fitting","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Estimation bycatch /index abundance carried using function bycatchFit. function requires object produced bycatchSetup well several arguments.","code":"bycatchFit(   setupObj = setupObj,   selectCriteria = \"BIC\",   DoCrossValidation = FALSE,   DredgeCrossValidation = FALSE,   ResidualTest = FALSE,   CIval = 0.05,   VarCalc = \"None\",   useParallel = TRUE,   nSims = 1000,   baseDir = getwd(),   plotValidation = FALSE,   trueVals = NULL,   trueCols = NULL,   doReport = TRUE )"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Goodyear, C.P. 2021. Development new model fisheries simulating longline catch data LLSIM. Collect. Vol. Sci. Pap. ICCAT, 78(5): 53-62 Babcock, E.. C. Phillip Goodyear. 2021. Testing bycatch estimation tool using simulated blue marlin longline data. Collect. Vol. Sci. Pap. ICCAT, 78(5): 179-189","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch Estimator — BycatchEstimator-package","title":"Bycatch Estimator — BycatchEstimator-package","text":"Generic Model-Based Bycatch Estimation Procedure","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bycatch Estimator — BycatchEstimator-package","text":"code can estimate total bycatch, calculated expanding sample, observer database, total effort logbooks landings records, annual index abundance, calculated observer data.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bycatch Estimator — BycatchEstimator-package","text":"Maintainer: Elizabeth Babcock ebabcock@rsmas.miami.edu contributors: William Harford bill@natureanalytics.ca [contributor]","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositives.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","title":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","text":"Function look positive zero observations across levels multiple factors","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","text":"","code":"CheckForPositives(datval, species, variables)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Same for plotting — CheckForPositivesPlot","title":"Same for plotting — CheckForPositivesPlot","text":"plotting","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same for plotting — CheckForPositivesPlot","text":"","code":"CheckForPositivesPlot(datval, species, variables)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same for plotting — CheckForPositivesPlot","text":"datval Value species Value variables Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fit a specified model formula and print outputs — FitModelFunc","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"Function fit specified model formula print outputs","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"","code":"FitModelFunc(formula1, formula2, modType, obsdatval, outputDir)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"formula1 Value formula2 Value modType Value obsdatval Value outputDir Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"Function fit specified model formula print outputs Cross validation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"","code":"FitModelFuncCV(formula1, modType, obsdatval)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"formula1 Value modType Value obsdatval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":null,"dir":"Reference","previous_headings":"","what":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"LLSIm BUM trip, 5% observer coverage including observed catch totals April 17 2022","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"","code":"LLSIM_BUM_Example_logbook"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"tibble 25 columns. row fishing trip. trip Trip idenifier Year Year month month year gear Gear code light Light code fleet Fleet number bait Bait code hook Hook code hooks Effort variable, hooks sets Number sets trip SWO Swordfish catch numbers BUM Blue marlin catch numbers lat5 Latitude assigned 5 degree grid lon5 Longitude assigned 5 degree grid lat Trip latitude lon Trip longitude hbf Hooks floats habSWO SDM habitat variable swordfish habBUM SDM habitat variables blue marlin season Categorical season variable area Categorical season variable unsampledEffort Unsampled effort","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"LLSIm BUM trip, 5% observer coverage including observed catch totals April 17 2022","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"","code":"LLSIM_BUM_Example_observer"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"tibble 22 columns. row fishing trip. trip Trip idenifier Year Year month month year gear Gear code light Light code fleet Fleet number bait Bait code hook Hook code hooks Effort variable, hooks sets Number sets trip SWO Swordfish catch numbers BUM Blue marlin catch numbers lat5 Latitude assigned 5 degree grid lon5 Longitude assigned 5 degree grid lat Trip latitude lon Trip longitude hbf Hooks floats habSWO SDM habitat variable swordfish habBUM SDM habitat variables blue marlin season Categorical season variable area Categorical season variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to make data summarizes including ratio estimate at — MakeSummary","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"stratification defined strataVars","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"","code":"MakeSummary(obsdatval, logdatval, strataVars, EstimateBycatch, startYear)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"obsdatval Value logdatval Value strataVars Value EstimateBycatch Value startYear Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"Function plots residuals R Dharma library calculate residual diagnostics.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"","code":"ResidualsFunc(modfit1, modType, fileName = NULL, nsim = 250)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"modfit1 Value modType Value fileName Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaDivide.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","title":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","text":"Function divide areas. Input grid areas, returns East vs. West","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaDivide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","text":"","code":"areaDivide(area)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaGOM.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","title":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","text":"Function convert new areas old areas Kevin McCarthy","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaGOM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","text":"","code":"areaGOM(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areafunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","title":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","text":"Stratum designations Scott-Denton paper, shrimp observer manual GOM shrimp areas","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areafunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","text":"","code":"areafunc(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch model fitting routine — bycatchFit","title":"Bycatch model fitting routine — bycatchFit","text":"Produces model-based estimates bycatch annual abundance index, specified bycatchSetup","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bycatch model fitting routine — bycatchFit","text":"","code":"bycatchFit(   setupObj,   selectCriteria = \"BIC\",   DoCrossValidation = FALSE,   DredgeCrossValidation = FALSE,   ResidualTest = TRUE,   CIval = 0.05,   VarCalc = \"Simulate\",   useParallel = TRUE,   nSims = 10,   baseDir = getwd(),   plotValidation = FALSE,   trueVals = NULL,   trueCols = NULL,   doReport = TRUE )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bycatch model fitting routine — bycatchFit","text":"setupObj object produced bycatchSetup. selectCriteria Character. Model selection criteria. Options AICc, AIC BIC DoCrossValidation Specify whether run 10 fold cross-validation (TRUE FALSE). may work small unbalanced dataset DredgeCrossValidation DredgeCrossValidation specifies whether use information criteria find best model cross validation, using dredge function, just keep model formula. use dredge large datasets, run slow. ResidualTest Logical. Specify whether exclude models fail DHARMa residuals test. CIval Specify confidence interval total bycatch estimates. alpha level, e.g. 0.05 95% VarCalc Character. Options : \"Simulate\",\"DeltaMethod\", \"None\". Variance calculation method. Simulate work large number sample units logbook data. delta method variance calculation implemented delta-lognormal delta-gamma methods. useParallel Logical. Whether conduct analysis using parallel processing. initialized two cores available. nSims Number simulations used calculate confidence intervals. Ignored VarCalc set \"None\" baseDir Character. directory save output. Defaults current working directory. plotValidation Logical. Validation. true values total bycatch (example simulation study). Make PlotValidation true fill rest specification. trueVals data set contains true simulated total catches year. trueCols column true simulated catches contains true bycatch year doReport Logical. Create markdown report analysis","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bycatch model fitting routine — bycatchFit","text":"","code":"if (FALSE) { library(BycatchEstimator) #------------------------------------------------- #Step 1. Run the setup file and review data inputs setupObj<-bycatchSetup(  modelTry = c(\"Lognormal\",\"Delta-Lognormal\",\"Delta-Gamma\",\"TMBnbinom1\",\"TMBnbinom2\",\"TMBtweedie\"),  obsdat = LLSIM_BUM_Example_observer,  logdat = LLSIM_BUM_Example_logbook,  yearVar = \"Year\",  obsEffort = \"hooks\",  logEffort = \"hooks\",  logUnsampledEffort = \"unsampledEffort\",  includeObsCatch  = TRUE,  matchColumn = \"trip\",  factorNames = c(\"Year\",\"fleet\",\"area\",\"season\"),  EstimateIndex = TRUE,  EstimateBycatch = TRUE,  logNum = NA,  sampleUnit = \"trips\",  complexModel = formula(y~Year+fleet+hbf+area+season+Year:area),  simpleModel = formula(y~Year+fleet+area),  indexModel = formula(y~Year+area),  baseDir = getwd(),  runName = \"LLSIMBUMtrip2022Aprilobs05mc\",  runDescription = \"LLSIm BUM by trip, with 5% observer coverage including observed catch in totals April 17 2022\",  common = c(\"Swordfish\",\"Blue marlin\")[2],  sp = c(\"Xiphias gladius\",\"Makaira nigricans\")[2],  obsCatch = c(\"SWO\",\"BUM\")[2],  catchUnit = \"number\",  catchType = \"catch\" )  ------------- #Step 2. Model Fitting bycatchFit(  setupObj = setupObj,  selectCriteria = \"BIC\",  DoCrossValidation = TRUE,  DredgeCrossValidation = FALSE,  ResidualTest = FALSE,  CIval = 0.05,  VarCalc = \"Simulate\",  useParallel = TRUE,  nSims = 1000,  baseDir = getwd(),  plotValidation = FALSE,  trueVals = NULL,  trueCols = NULL )}"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch estimation model setup — bycatchSetup","title":"Bycatch estimation model setup — bycatchSetup","text":"Sets global conditions makes preliminary data summary.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bycatch estimation model setup — bycatchSetup","text":"","code":"bycatchSetup(   modelTry = c(\"Delta-Lognormal\", \"Delta-Gamma\", \"TMBnbinom1\", \"TMBnbinom2\",     \"TMBtweedie\"),   obsdat,   logdat,   yearVar,   obsEffort,   logEffort,   logUnsampledEffort = NULL,   includeObsCatch = FALSE,   matchColumn = NA,   factorNames,   EstimateIndex,   EstimateBycatch,   logNum,   sampleUnit,   complexModel,   simpleModel,   indexModel,   baseDir = getwd(),   runName,   runDescription,   common,   sp,   obsCatch,   catchUnit,   catchType )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bycatch estimation model setup — bycatchSetup","text":"modelTry Specify observation error models try. Options : \"Binomial\", \"Normal\",\"Lognormal\", \"Delta-Lognormal\", \"Delta-Gamma\", \"NegBin\" Negative binomial\" using glm.mb MASS library, \"Tweedie\" Tweedie GLM cpglm library, \"TMBnbinom1\", \"TMBnbinom2\", \"TMBtweedie\" negative binomial 1, negative binomial 2 Tweedie GLMMTMB library. Binomial run automatically part delta models either selected. obsdat Observer data set logdat Logbook data set yearVar Character. name year variable obsdat logdat. input files must contain variable name year. obsEffort Character. name effort variable obsdat. variable must effort units logEffort logEffort Character. name effort variable logdat. Optional used estimating bycatch. variable must effort units obsEffort logUnsampledEffort Character. name unsampled effort variable logdat. Optional used specify column effort sampled, trips observers. can zero cases observers sample 100% effort sampled trips. used includeObsCatch TRUE includeObsCatch Logical. Set TRUE (1) observed sample units can matched logbook sample units (2) want calculate total bycatch observed bycatch plus predicted unobserved bycatch. work aggregated logbook effort. matchColumn Character. includeObsCatch TRUE, give name column matches sample units observer logbook data. Otherwise, can NA factorNames Character vector. Specify variables interpreted categorical, ensuring imposes factor format variables. Variables list retain original format. variables must identical names factor levels obsdat logdat EstimateIndex Logical. like estimate? may calculate either annual abundance index, total bycatch, . EstimateBycatch Logical. like estimate? may calculate either annual abundance index, total bycatch, . want total bycatch, must provide logbook data source total effort logdat. logNum Character vector. name column logdat gives number sample units (e.g., trips sets). logbook data aggregated (.e. row sample unit) set value NA sampleUnit Character. sample unit logdat? e.g. sets trips. complexModel Specify stats::formula. Specify complex simplest model considered. code find compare intermediate models using information criteria. simpleModel Specify stats::formula. indexModel Specify stats::formula. Use indexModel specify strata keep separate calculating abundance indices. baseDir Character. directory save output. Defaults current working directory. runName Characer. Give name run, used set directory outputs runDescription Character. Brief summary run, used set directory outputs common Character vector. Provide common name species used bycatch index estimation. Can vector names multiple species time. sp Character vector. Provide scientific name species used bycatch index estimation. Can vector names multiple species time obsCatch Character vector. name column(s) obsdat contain catch. vector, order variable names must follow order names provided common sp catchUnit Character vector. Give units catch (e.g., number) go plot labels. Must vector length sp catchType Character vector. Give type catch (e.g., dead discards) go plot labels. Must vector length sp","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bycatch estimation model setup — bycatchSetup","text":"","code":"if (FALSE) { library(BycatchEstimator) setupObj<-bycatchSetup( modelTry = c(\"Delta-Lognormal\",\"Delta-Gamma\",\"TMBnbinom1\",\"TMBnbinom2\",\"TMBtweedie\"), obsdat = obsdatExample, logdat = logdatExample, yearVar = \"Year\", obsEffort = \"sampled.sets\", logEffort = \"sets\", logUnsampledEffort = NULL, includeObsCatch  = FALSE, matchColumn = NA, factorNames = c(\"Year\",\"season\"), EstimateIndex = TRUE, EstimateBycatch = TRUE, logNum = NA, sampleUnit = \"trips\", complexModel = formula(y~(Year+season)^2), simpleModel = formula(y~Year), indexModel = formula(y~Year), baseDir = getwd(), runName = \"SimulatedExample\", runDescription = \"Example with simulated data\", common = \"Simulated species\", sp = \"Genus species\", obsCatch = \"Catch\", catchUnit = \"number\", catchType = \"dead discard\" )}"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find best model by information criteria, by model type — findBestModelFunc","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"Function find best model information criteria, model type","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"","code":"findBestModelFunc(   obsdatval,   modType,   requiredVarNames,   allVarNames,   complexModel,   useParallel,   selectCriteria,   varExclude,   printOutput = FALSE,   catchType = NULL,   common = NULL,   dirname = NULL,   run = NULL )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"obsdatval Value modType Value requiredVarNames Value allVarNames Value complexModel Value useParallel Value selectCriteria Value varExclude Value printOutput Value catchType Value common Value dirname Value run Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/fishTimeFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","title":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","text":"Function calculate number hours fished day counted first set last haul fishTimeFunc","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/fishTimeFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","text":"","code":"fishTimeFunc(timeout, timein, prop.sampled = 1)  fishTimeFunc(timeout, timein, prop.sampled = 1)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getME.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean error — getME","title":"Calculate mean error — getME","text":"Calculate mean error","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean error — getME","text":"","code":"getME(yhat, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RMSE — getRMSE","title":"Calculate RMSE — getRMSE","text":"Calculate RMSE","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RMSE — getRMSE","text":"","code":"getRMSE(yhat, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find range of a numerical variable — getRange","title":"Function to find range of a numerical variable — getRange","text":"Function find range numerical variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find range of a numerical variable — getRange","text":"","code":"getRange(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"Generate mean standard error predictions delta lognormal simulation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"","code":"getSimDeltaLN(modfitBin, modfitLnorm, df1, nsim = 10000)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"modfitBin Value modfitLnorm Value df1 Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"Generate standard errors predictions simulation regression coefficients var/covar matrix","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"","code":"getSimSE(modfit, df1, transFunc = \"none\", offsetval = NULL, nsim)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"modfit Value df1 Value transFunc Value offsetval Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"Function convert data excel format date time separated blank R format date","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"","code":"getdatefunc(x, dateformat = \"%m/%d/%Y\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"x data dateformat Date format, default %m/%d/%Y.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":null,"dir":"Reference","previous_headings":"","what":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"Function 2 convert data excel format date time separated blank R format date","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"","code":"getdatefunc2(x, dateformat = \"%d%b%Y\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"x data dateformat Date format, default %d%b%Y.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time in excel format — gettimefunc2","title":"Convert time in excel format — gettimefunc2","text":"Convert time excel format","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time in excel format — gettimefunc2","text":"","code":"gettimefunc2(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time in excel format — gettimefunc2","text":"x data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/goodman.var.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","title":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","text":"Exact variance product two independent variables, Goodman (1960)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/goodman.var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","text":"","code":"goodman.var(x, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ilogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse logit — ilogit","title":"Inverse logit — ilogit","text":"Inverse logit","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ilogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse logit — ilogit","text":"","code":"ilogit(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/length.unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to count the number of unique levels in a vector — length.unique","title":"Function to count the number of unique levels in a vector — length.unique","text":"Function count number unique levels vector","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/length.unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to count the number of unique levels in a vector — length.unique","text":"","code":"# S3 method for unique length(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","title":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","text":"Calculate lognormal mean standard error normal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","text":"","code":"lnorm.mean(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.se.html","id":null,"dir":"Reference","previous_headings":"","what":"lnorm.se — lnorm.se","title":"lnorm.se — lnorm.se","text":"lnorm.se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lnorm.se — lnorm.se","text":"","code":"lnorm.se(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of a product from Lo et al. (1992) — lo.se","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"Variance product Lo et al. (1992)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"","code":"lo.se(x1, x1e, x2, x2e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"x1 Value x1e Value x2 Value x2e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Logbook simple example data set — logdatExample","title":"Logbook simple example data set — logdatExample","text":"Example data set logbook. Can used run bycatch estimation procedure along observer example data set.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logbook simple example data set — logdatExample","text":"","code":"logdatExample"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Logbook simple example data set — logdatExample","text":"tibble 5 columns. EW East/West spatial grouping variable season season temporal grouping variable Year Year variable sets effort variable e.g., e.g. 1000 hook hours trips Number sample units record, trips example. example logbook data aggregated, thus row 1 trip","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Logbook simple example data set — logdatExample","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get an abundance index with SE, Does not yet have year interactions as random effects — makeIndexVar","title":"Function to get an abundance index with SE, Does not yet have year interactions as random effects — makeIndexVar","text":"Function get abundance index SE, yet year interactions random effects","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get an abundance index with SE, Does not yet have year interactions as random effects — makeIndexVar","text":"","code":"makeIndexVar(   modfit1,   modfit2 = NULL,   modType,   newdat,   nsims,   printOutput = FALSE,   catchType = NULL,   common = NULL,   dirname = NULL,   run = NULL )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get an abundance index with SE, Does not yet have year interactions as random effects — makeIndexVar","text":"modfit1 Value modfit2 Value modType Value newdat Value nsims Value printOutput Value catchType Value common Value dirname Value run Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"Function predict CPUE without variances get predictions quickly cross validation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"","code":"makePredictions(modfit1, modfit2 = NULL, modType, newdat, obsdatval = NULL)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"modfit1 Value modfit2 Value modType Value newdat Value obsdatval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"Generate standard errors confidence intervals predictions delta-method separately year","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"","code":"makePredictionsDeltaVar(   modfit1,   newdat,   modtype,   obsdatval,   includeObsCatch,   requiredVarNames,   CIval,   printOutput = TRUE,   catchType,   common,   dirname,   run )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"modfit1 Value newdat Value modtype Value obsdatval Value includeObsCatch Value requiredVarNames Value CIval Value printOutput Value catchType Value common Value dirname Value run Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsNoVar","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsNoVar","text":"Generate standard errors confidence intervals predictions delta-method separately year","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsNoVar","text":"","code":"makePredictionsNoVar(   modfit1,   modfit2 = NULL,   modtype,   newdat,   obsdatval = NULL,   nsims,   includeObsCatch,   requiredVarNames,   printOutput = TRUE,   catchType,   common,   dirname,   run )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsNoVar","text":"modfit1 Value modtype Value newdat Value obsdatval Value includeObsCatch Value requiredVarNames Value printOutput Value catchType Value common Value dirname Value run Value CIval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVar","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVar","text":"Generate standard errors confidence intervals predictions simulation regression coefficients var/covar matrix","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVar","text":"","code":"makePredictionsSimVar(   modfit1,   modfit2 = NULL,   modtype,   newdat,   obsdatval = NULL,   includeObsCatch,   nsim,   requiredVarNames,   CIval,   printOutput = TRUE,   catchType,   common,   dirname,   run )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVar","text":"modfit1 Value modfit2 Value modtype Value newdat Value obsdatval Value includeObsCatch Value nsim Value requiredVarNames Value CIval Value printOutput Value catchType Value common Value dirname Value run Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"Generate standard errors confidence intervals predictions simulation regression coefficients var/covar matrix","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"","code":"makePredictionsSimVarBig(   modfit1,   modfit2 = NULL,   newdat,   modtype,   obsdatval,   includeObsCatch,   nsim,   requiredVarNames,   CIval,   printOutput = TRUE,   catchType,   common,   dirname,   run )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"modfit1 Value modfit2 Value newdat Value modtype Value obsdatval Value includeObsCatch Value nsim Value requiredVarNames Value CIval Value printOutput Value catchType Value common Value dirname Value run Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find mode of a categorical variable — mostfreqfunc","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"Function find mode categorical variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"","code":"mostfreqfunc(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"x value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate normal mean from lognormal mean and se — norm.mean","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"Calculate normal mean lognormal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"","code":"norm.mean(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"x1 Value x1e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard error from lognormal mean and se — norm.se","title":"Calculate standard error from lognormal mean and se — norm.se","text":"Calculate standard error lognormal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard error from lognormal mean and se — norm.se","text":"","code":"norm.se(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard error from lognormal mean and se — norm.se","text":"x1 Value x1e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Observer simple example data set — obsdatExample","title":"Observer simple example data set — obsdatExample","text":"Example data set logbook. Can used run bycatch estimation procedure along observer example data set.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observer simple example data set — obsdatExample","text":"","code":"obsdatExample"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Observer simple example data set — obsdatExample","text":"tibble 5 columns. EW East/West spatial grouping variable season season temporal grouping variable Year Year variable sampled.sets effort variable e.g., e.g. 1000 hook hours Catch Bycatch species numbers caught","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Observer simple example data set — obsdatExample","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"Function count outliers, defined numSD standard deviations mean.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"","code":"outlierCountFunc(x, numSD = 8)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"x Value numSD Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"Function plot boxplots RMSE across folds","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"","code":"plotCrossVal(rmse, me, fileName)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"rmse Value Value fileName Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot abundance index plus minus standard error — plotIndex","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"Function plot abundance index plus minus standard error","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"","code":"plotIndex(   yearpred,   modType,   fileName,   subtext = \"\",   indexVarNames,   allVarNames,   startYear,   common,   run,   catchType,   catchUnit )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"yearpred Value modType Value fileName Value subtext Value indexVarNames Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"Function plot either total positive trips (binomial) total catch/bycatch (models)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"","code":"plotSums(   yearpred,   modType,   fileName,   subtext = \"\",   allVarNames,   startYear,   common,   run,   catchType,   catchUnit )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"yearpred Value modType Value fileName Value subtext Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot total catch by all models plus a validation number — plotSumsValidate","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"Function plot total catch models plus validation number","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"","code":"plotSumsValidate(   yearpred,   trueval,   fileName,   colName,   allVarNames,   startYear,   common,   run,   catchType,   catchUnit )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"yearpred Value trueval Value fileName Value colName Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic ratio estimator with variance (Cochran) — ratio.func","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"Output mean standard error bycatch stratum total bycatch SE. Assumes unobserved strata zero catch","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"","code":"ratio.func(x, y, g, X, N, G)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"x x, y g vectors giving effort/catch, bycatch stratum observed sample unit. y x, y g vectors giving effort/catch, bycatch stratum observed sample unit. g x, y g vectors giving effort/catch, bycatch stratum observed sample unit. X X total effort/catch stratum N N total number sample units stratum, available, otherwise total effort G Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"Variables x=sum(obs Effort),X=sum(log Effort), n=observed sample units. N=log sample units, Rhat=mean(obs Catch)/mean(obs Effort), sx2, sy2, sxy observed variance effort catch, covariance","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"","code":"ratioVar(x, X, n, N, Rhat, sx2, sy2, sxy)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"x Value X Value n Value N Value Rhat Value sx2 Value sy2 Value sxy Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/seasonfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","title":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","text":"Function convert months 2, 3 4 6 numbered seasons","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/seasonfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","text":"","code":"seasonfunc(month, numseason = 4)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateGammaDraw — simulateGammaDraw","title":"simulateGammaDraw — simulateGammaDraw","text":"simulateGammaDraw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateGammaDraw — simulateGammaDraw","text":"","code":"simulateGammaDraw(modfit, nObs, b)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateGammaDraw — simulateGammaDraw","text":"modfit Value nObs Value b Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateNegBin1Draw — simulateNegBin1Draw","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"simulateNegBin1Draw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"","code":"simulateNegBin1Draw(modfit, nObs, b, Effort)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"modfit Value nObs Value b Value Effort Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"Function simulate DHARMa residuals negative binomial GAM GLM","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"","code":"simulateNegBinGam(modfit, nsims = 250, offsetval = 1)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"modfit Value nsims Value offsetval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"simulateTMBTweedieDraw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"","code":"simulateTMBTweedieDraw(modfit, nObs, b, Effort)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"modfit Value nObs Value b Value Effort Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"Generate simulations use input DHARMa residual calculations Tweedie cpglm.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"","code":"simulateTweedie(modfit1, nsims)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"modfit1 Value nsims Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard error of a mean — standard.error","title":"Standard error of a mean — standard.error","text":"Standard error mean","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard error of a mean — standard.error","text":"","code":"standard.error(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard error of a mean — standard.error","text":"x Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/yearfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to group the specified number of years together, starting from the last year — yearfunc","title":"Function to group the specified number of years together, starting from the last year — yearfunc","text":"Function group specified number years together, starting last year","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/yearfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to group the specified number of years together, starting from the last year — yearfunc","text":"","code":"yearfunc(year, numyears = 1)"}]
