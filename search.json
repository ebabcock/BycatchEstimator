[{"path":"https://ebabcock.github.io/BycatchEstimator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 BycatchEstimator authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/InstallationGuide.html","id":"before-you-install-bycatchestimator","dir":"Articles","previous_headings":"","what":"Before you install BycatchEstimator","title":"Installing BycatchEstimator","text":"BycatchEstimator package prints output figures either html pdf files. select pdf output, must LaTeX package installed computer. don’t , can install TinyTex (https://yihui.org/tinytex/), works takes less disk space LaTeX options. Try test code TinyTex installation guide make sure can print pdf trying install BycatchEstimator. BycatchEstimator requires recent versions R libraries uses. older version R, update R libraries current version try install BycatchEstimator. RStudio need authority make changes computer can install new libraries. may need run RStudio administrator privileges, /give permission installation files make changes computer. can’t install computer, bycatchEstimator works fine RStudio cloud (https://rstudio.cloud).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/InstallationGuide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installing BycatchEstimator","text":"install BycatchEstimator GitHub, must devtools package installed. can install development version BycatchEstimator GitHub. install current version, use : install version 2024, use . current version recommended new features: install BycatchEstimator, install /update many files. Try install . asks whether want install packages require compilation, try saying yes, doesn’t work try saying . package installations updates fail, can try install packages one time. Don’t worry get message saying packages date.","code":"# install.packages(\"devtools\") devtools::install_github(\"ebabcock/BycatchEstimator\") # install.packages(\"devtools\") devtools::install_github(\"ebabcock/BycatchEstimator@v0.0.9\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/InstallationGuide.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Installing BycatchEstimator","text":"Due complication coding, user must load library(MuMIn) addition library(BycatchEstimator). point, try looking help files BycatchEstimator functions make sure library loaded. now able run functions. Try running example data https://github.com/ebabcock/BycatchEstimator make sure works. information see User’s Guide https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html. Contact ebabcock@miami.edu help can’t get work.","code":"library(BycatchEstimator) library(MuMIn) ?bycatchSetup ?bycatchDesign ?bycatchFit"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BycatchEstimator User Guide","text":"BycatchEstimator tool estimates total bycatch, calculated expanding sample, observer data set, total effort logbooks landings records. bycatch estimates made either generic model-based bycatch estimation procedure, common design-based bycatch estimation methods (e.g. stratified ratio estimator). bycatch estimation methods essentially estimate total bycatch sum strata (, e.g. years, areas, seasons), bycatch rate r estimated sample fishery (e.g. observer data), times total effort E estimated fish landings records logbook data: B=∑iriEiB=\\sum_{}r_i E_i Design-based methods calculate bycatch rate directly observer data formula (See ), model-based estimators use generalized linear model (GLM) estimate predicted bycatch rate r̂\\hat{r} use expansion. Models can allow variables included, , example, information habitat bycatch species, may improve precision bycatch estimates. However, model-based design-based estimators often produce similar estimates, simpler design-based estimates sufficient many cases. workflow using BycatchEstimator : Install code test everything works properly running example. Run bycatchSetup function produce data summaries plots, make sure data appropriate bycatch estimation. Run either bycatchDesign design-based estimators, bycatchFit model-based estimators, . Use output figures tables directly, desired, use loadOutputs function input model runs back R advanced analysis. Validate results possible. user guide provides detailed information use tool, general guidance bycatch estimation.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"installing-the-code","dir":"Articles","previous_headings":"","what":"Installing the code","title":"BycatchEstimator User Guide","text":"code runs best RStudio. running code first time, install latest versions R (R Core Team (2020)) RStudio (RStudio Team (2020)). following libraries used: tidyverse, ggplot2, MASS, lme4, cplm, tweedie, DHARMa, tidyselect, MuMIn, gridExtra, pdftools (pdf output selected), foreach, doParallel, reshape2, glmmTMB, GGally quantreg (Wickham et al. (2019); Wickham (2016); Venables Ripley (2002); Bates et al. (2015); Zhang (2013); Dunn Smyth (2005); Hartig (2020); Henry Wickham (2020); Barton (2020); Auguie (2017); Wickham Pedersen (2019); Iannone, Cheng, Schloerke (2020); Ooms (2020);Microsoft Weston (2020);Corporation Weston (2020); Wickham (2007); Brooks et al. (2017);Schloerke et al. (2024); Koenker (2021)). output figures tables printed user’s choice html pdf file using RMarkdown knitr library(Xie (2025)). use pdf outputs, must LaTex program installed, TinyTex (Xie (2019), Xie (2021), Xie (2025)). quick start guide example data, see GitHub page (https://github.com/ebabcock/BycatchEstimator). help installation issues, see Installation Guide https://ebabcock.github.io/BycatchEstimator/articles/InstallationGuide.html. following code load libary GitHub using devtools (Wickham et al. (2022)).","code":"# install.packages(\"devtools\") #devtools::install_github(\"ebabcock/BycatchEstimator\") library(BycatchEstimator) library(MuMIn)"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"data-specification","dir":"Articles","previous_headings":"","what":"Data specification","title":"BycatchEstimator User Guide","text":"function bycatchSetup sets data analysis provides data checks, summaries warnings. function takes input sample fishery, hereafter referred observer data although come source, data set total effort, hereafter referred logbook data, although source long records fishing effort fishery. function must run running either bycatchDesign bycatchFit. observer data aggregated appropriate sample unit, trips sets, row corresponds one sample unit. Effort must units data sets (e.g. sets hook-hours). logbook data may aggregated sample units, may aggregated , long includes data stratification predictor variables. example, logbook data can aggregated year, region season stratification variables, row can one sample unit. logbook data aggregated, must column, name specified logNum, giving number sample units per row logbook data (logNum=NA means rows logbook data one sample unit). information number sample units needed variance calculations. environmental variables, depth, included, observed logbook data probably entered set level. observer data columns year predictor (models) stratification (design-based) variables, observed effort observed bycatch catch per trip species estimated. logbook data must also columns Year predictor variables, total effort units (e.g. sets hook-hours) observer data. NA values variables, rows deleted observer data set. NA values logbook dataset cause function stop error message. NA values logbook data, dataset complete accounting effort. variables intend use analysis entered character vectors named factorVariables numericVariables. Note design-based methods work categorical variables. Year interpreted factor design-based methods whether numerical factor. model-based methods, Year may either number factor. Note input “yearVar” name year variable datasets. However, variable renamed Year (capital Y) code. Year predictor variable analysis, must still input value yearVar dataSetup, don’t use analysis functions. Year spelled “Year” numericVariables, factorVariables, model inputs. code can used analyze multiple species, disposition types (e.g. retained catch, dead discards, live releases) time. specified inputting vector rather single value scientific name, common name, units estimates, name column containing catch data (obsCatch).inputs can single value analyzing one species catch type. function outputs user’s choice html pdf file, , named shortened version species name, catch type “data checks”, directories named “output” followed specified run name. csv file species placed directory named species, sub-directory “Setup Files”. multiple species catch types, summary file. warning messages NA values data 0 values observer effort data, levels factor variable logbook data present observer data. html pdf data check file include warnings, table combinations factors present logdat obsdat () following tables plots. tables : Observer coverage levels sample units (rows observer data) effort (sum Effort columns). summary table Year number observed total effort units, number positive observations species, number outliers (defined CPUE data points 8 standard deviations mean), simple unstratified ratio estimator estimate catch (See Appendix details). Figures comparing logbook observer effort : Barplots histograms sum total effort whole fishery observed sample across levels categorical numerical variable. Pairs plots showing overlap observer total (logbook) effort across pairs categorical numeric variables. (Categorical variables 15 levels converted numerical plot). Figures showing catch observer data : Barplots presence absence bycatch species year level categorical numeric variables. Barplots total catch bycatch species year level categorical numeric variables. Violin plots scatterplots catch per sample unit, across categorical numeric variables. Violin plots scatterplots catch per unit effort (CPUE), across categorical numerical variables. Note records NA variables observer data, including catch effort variable, excluded analysis included estimated sample size tables figures. many NAs sample size low, may want exclude variable analysis impute missing values. looking tables plots, check observer data spans roughly values variables observer data. Design-based estimators assume catch zero strata (.e. combinations predictor variables) observer data, unless set pooling options described . Model-based estimation methods work best non-zero catches across levels factor variable. Numeric variables can introduce bias observed data include full range values whole fishery. Also, look non-linear trends relationship CPUE numerical variable. numeric variable treated simple linear regression models. relationship looks non-linear, may want consider polynomial regression (see ). Also, check instances high CPUE. may happen catch occurs set/trip low recorded effort, outliers may bias results. general, model-based methods sensitive outliers, often errors data cleaned . zeroes values Effort observer data (possible), corrected model-based analysis. NA values logbook data cause code stop error message. Values effort predictor variables needed entire fishery total bycatch estimated correctly. total effort (logbook) data missing values variables component fishery (e.g. gear type years), consider excluding part fishery bycatch calculations, reporting bycatch part fishery complete effort data. missing values scattered throughout dataset, consider filling missing values reasonable numbers. example, sets missing data effort number hook-hours, replace NAs mean effort (e.g. mean number hook-hours per set unit effort). Imputing missing values preferable excluding effort fishery, deleting missing records implies sample units bycatch. Similarly, value categorical variable like gear type missing, NAs filled common gear type, random choice gear type. imputation methods cause bias number imputed values fairly small.","code":"setupObj<-bycatchSetup(   obsdat = obsdatExample,   logdat = logdatExample,   yearVar = \"Year\",   obsEffort = \"sampled.sets\",   logEffort = \"sets\",   obsCatch = \"Catch\",   catchUnit = \"number\",   catchType = \"catch\",   logNum = NA,   sampleUnit = \"trips\",   factorVariables = c(\"Year\",\"EW\",\"season\"),   numericVariables = NA,   EstimateBycatch = TRUE,   baseDir = getwd(),   runName = \"Simulated\",   runDescription = \"Simulated example species\",   common = \"Simulated species\",   sp = \"Genus species\",   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"design-based-estimators","dir":"Articles","previous_headings":"","what":"Design-based estimators","title":"BycatchEstimator User Guide","text":"section provides guidance function bycatchDesign using design-based estimators. function takes output bycatchSetup (e.g. setupObj) input, must run day, along specifications design-based estimators. may run multiple scenarios (e.g. different pooling specifications) setupObj, specifying scenario name (designScenario), included output file names. design-based methods available stratified ratio estimator Rao (2000) design based delta-lognormal estimator Pennington (1983). use design-based estimators, specify character vector. example, designMethods =c(“Ratio”,“Delta”) calculate estimates. total bycatch estimates made stratification variables defined user vector called designVars, must categorical variables. Annual summaries produced summing across strata within years. want produce output plots across variable Year (e.g. 2-year periods), specify name variable groupVar. deal strata observations observations, user may request pooling (designPooling=TRUE), specify minimum number sample units needed avoid pooling. pooling, total bycatch estimated observer logbook data specified pooling scheme stratum (.e. combination variables) allocated stratum according fraction logbook effort pooled data stratum interest. Unpooled estimates used strata sufficient data. Variances also allocated stratum interest based fraction total effort. See Brown (2001) details one potential pooling scheme. pooling requested, strata pooled order designVars. Three additional vectors needed define pooling works: poolTypes, says whether variable pooled across “adjacent” levels (Year ), “” values, new variable “pooledVar” (e.g. season rather month) “none” levels variable always kept separate; pooledVar specifies new variable pooling pooledVar pooling method; adjacentNum specifies number adjacent years include adjacent year method (e.g. 1 include previous following year). vectors must length designVars. must also specify minimum number sample units stratum require pooling. function produces user’s choice pdf html file bycatch estimates species catch type, labelled designScenario species name plus “design results”. file includes table total estimates year method, along standard errors, figure showing estimates year 95% confidence intervals. pooling requested, barplot showing number strata pooled Year variable designVars, also indicating number strata acheived specified minimum number sample units. outputs also given .csv files folder labeled “Design outputs”. estimates columns called ratioMean, ratioSE, deltaMean deltaSE file labelled DesignSummary (year) file labelled DesignStrata (stata). pooling requested, csv labelled “pooling” gives number sample units strata without pooling, etc. See details outputs Appendix. general, combinations stratification variables (designVars) exist observer data exist logbook data, consider least pooling. Without pooling, model assume bycatch unsampled strata, , many stratification variables, total bycatch -estimated substantially. can experiment different pooling schemes see give different results, giving different designScenario names. Note leaving variable list designVars equivalent always pooling levels variable. observer program allocates observer sampling effort stratified random design, observer coverage level varies strata, usually necessary include stratification variables design. example, observers allocated roughly equal numbers sets covered stratum defined gear, year, area season, strata fishing effort lower observer coverage rates. case, stratification variables included design-based estimators, pooling can used needed. hand, observers allocated randomly across whole fishery (simple random design) need include stratification variables, average bycatch rate across sampled part fo fishery representative. including multiple stratification variables necessary, sample sizes small enough require pooling, pooling strategy developed pool across strata similar bycatch rates. CPUE plots level variable Data Checks useful . example, seasons different, years similar within seasons, makes sense use adjacent year pooling. Similarly, areas similar can pooled. example, 10 fishing areas, group 2 fishing zones (e.g. zone 1 areas 1-5, zone 2 areas 6-10), use pooledVar feature pool within zones needed. Something like following pool adjacent years areas within zones: minimum number sample units needed avoid pooling can also adjusted. general, pooling require enough sample units estimated bycatch rates generally zero pool. example, species caught one set 10, minimum sample unit 10 might work. hand, pooling effect smoothing differences strata, may desirable purpose study compare strata. Experiment different levels pooling see pooling makes difference estimates, using different designScenario name version. course, increasing observer coverage level pooling needed provide best bycatch estimates.","code":"bycatchDesign( setupObj = setupObj, designScenario = \"withPooling\", designMethods = c(\"Ratio\", \"Delta\"), groupVar = \"Year\", designVars = c(\"Year\",\"season\",\"EW\"), designPooling = TRUE, poolTypes=c(\"adjacent\",\"all\",\"none\"), pooledVar=c(NA,NA,NA), adjacentNum=c(1,NA,NA), minStrataUnit = 1 ) designVars = c(\"Year\",\"area\") designPooling = TRUE poolTypes=c(\"adjacent\",\"pooledVar\") pooledVar=c(NA,zone) adjacentNum=c(1,NA)"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model specification","title":"BycatchEstimator User Guide","text":"Model-based analysis estimate total bycatch /generate abundance index done function bycatchFit user specifies potential predictor variables use potential error distribution models (e.g. negative binomial, delta-lognormal) use. function uses information criteria pick best set predictor variables error distribution model automatically using information criterion. best model group, total bycatch estimates model diagnostics generated. provide guidance choosing observation error model groups, cross-validation available. section explains run model interpret results. following section gives technical details guidance model selection. use function, specify input data object generated bycatchSetup. may run one scenario setupObj, specifying “modelScenario”. character vector “modelTry” indicates potential observation error distributions try functions use fitting. Options : “Tweedie” cplm library,“Lognormal”,“Delta-Lognormal”,“Delta-Gamma”,“Normal”,“Binomial”,“Poisson” “Gamma” ordinary glm lm functions, “NegBin” MASS library’s glm.nb function, “TMBnbinom1”,“TMBlognormal”, “TMBnbinom2”,“TMBtweedie”, “TMBgamma”, “TMBbinomial”, “TMBnormal”, “TMBpoisson”, “TMBdelta-Lognormal” “TMBdelta-Gamma” glmmTMB). binomial model tried requested, either delta-lognormal delta-Gamma model requested, since delta models binomial component. Note model outputs funtional form (e.g. Tweedie) whether using glmmTMB functions. negative binomial 2 TMB negative binomial glm.nb. get faster results, use glmmTMB model fitting. Give formulas complex simplest set predictor variables considered within model group. format R formulas (e.g. formula(y~Year)), y left-hand side formula. year variable must called Year (capital Y), whatever called actual data (entered yearVar). simplest model requires stratification variables Year, summaries predicted bycatch level stratification variables printed .csv files, plotted. user-specified simplest model often include Year, can also include, example, stratification variables used observer program sampling design. Year simplest model (e.g. simplest model null model y~1), model still produces bycatch estimates year, can vary one year next effort changes. abundance index requested, calculated including variables requested indexVars, allow different indices different stratification variables desired (e.g. different spatial areas). variables used model must included either numericVariables factorVariables bycatchSetup, retain classification. variables simplest complex model interpreted fixed effects. desired random effects can entered character vector (e.g. randomEffects=“Year:area”). case delta models used, can separate random effects binomial model (randomEffects) abundance present model (randomEffects2). random effects, fitting done glmmTMB. Random effects, , included models model selection. may useful including trip effect set--set analysis, example, including Year:area interaction random effect calculating indices. Specify information criterion use narrowing predictor variables use observation error model group; use default BIC. Model selection done dredge function MuMIn library(Barton (2020)) based user’s choice information criteria (AICc, AIC BIC) considering models simplest complex. model lowest value information criterion chosen best within observation error group. Specify whether cross validation choose observation error models. best candidate models observation error group compared using 10-fold cross validation, see observation error model best predicts CPUE. Note information criteria used directly compare, example, delta-lognormal negative binomial Tweedie, observation error models different y data. However, models can used predict CPUE directly, predictions can compared cross validation. best model according cross validation one lowest root mean square error (RMSE) predicted CPUE mean error () closest zero, excluding consideration models fit well according criteria described . Note model selection using information criteria cross validation intended guide. user also look information criteria across multiple models, well residuals diagnostics, may want choose different model bycatch estimation abundance index calculation based criteria, design observer sampling program. Also, code one draw 10-fold cross-validation, , small sample sizes, different model runs may give different cross-validation results. best model observation error model group, total bycatch estimated predicting catch logbook trips (.e., whole fishery) fitted model summing across trips. includeObsCatch FALSE (default), bycatch predicted across logbook data, option, using includeObsCatch=TRUE, predict bycatch unobserved effort (.e. trips sets sampled observers, sampled trips sets, effort sampled observer) calculate total bycatch observed bycatch plus predicted bycatch unobserved effort. works possible match observed trips sets logbook trips sets, amount observed effort sample unit always less equal amount total effort. fisheries high observer coverage (e.g. 20% ), predicting bycatch unobserved effort preferred, treating whole fishery unobserved might overestimate variance. use option, must column name obsdat logdat (matchColumn), trip number set number, can match observations obsdat logdat. observer sampled part effort (e.g. sampled sets trip), bycatch predicted logdat effort minus obsdat effort observed sample unit. includeObsCatch TRUE, bycatchFit give warnings , example, sample units observer data found logbook data, observed effort logbook total effort sample units. option works simulated example data, can difficult set real data, requires lot data cleaning, make observer logbook data consistent. function may slow (hour) large data set. variable useParallel TRUE computer multiple cores, dredge function run parallel. greatly speeds calculations. trouble getting work, set useParallel FALSE. Finally, information total bycatch year validate estimates, example simulation study, fill arguments plotValidation, trueVals, trueCols. Otherwise, leave arguments , set themto FALSE, NULL NULL, respectively. include validation data, trueVals set equal character string containing filename (complete path) file containing column labelled “Year”, columns total bycatch year, names specified trueCols. multiple species, trueCols can vector giving names column species order. function runs, summary model results file (html pdf), named species name model scenario (e.g. BlmarlnCATs1Modelresults.html) printed folder labelled species common name. file begins text describing model inputs basic information models fit successfully. diagnostics model details explained fully . models together, file includes: model comparison table, showing best model according information criteria, along column cause model failure, . cross-validation requested mean values RMSE included. results tests whether residuals consistent model. Parameters fitted models, including scale (variance estimated scaling parameter depending model type) along total log likelihood residual degrees freedom. figure bycatch across years, confidence intervals. figure abundance indices across years, requested, confidence intervals. Boxplots cross validation metrics across folds, cross-validation requestd. model type, file includes: model selection table MuMIn dredge function. Ordinary quantile residual figures. Observed vs. predicted values figures. figures showing total catch confidence interval. requested, abundance index. results may needed. However, want look closely specific model result, whether selected information criteria cross validation, outputs printed .csv files folders listed species, folder called “Fit files”. files : Model Selection. MuMIn dredge model selection table. Annual Summary. estimated total bycatch, standard errors confidence intervals model. Stratum Summary. estimated total bycatch, standard errors confidence intervals model variables simpleModel. Annual Index. annual abundance index requested.","code":"bycatchFit(   setupObj = setupObj,   modelScenario = \"s1\",   complexModel = formula(y~Year+season),   simpleModel = formula(y~Year),   indexModel = formula(y~Year),   modelTry = c(\"Tweedie\",\"Lognormal\",\"Delta-Lognormal\",\"Delta-Gamma\", \"TMBnbinom1\",\"TMBlognormal\",                           \"TMBnbinom2\",\"TMBtweedie\",\"Normal\",\"Binomial\",\"NegBin\", \"TMBgamma\",\"Gamma\",                           \"TMBbinomial\",\"TMBnormal\",\"TMBdelta-Lognormal\",\"TMBdelta-Gamma\",\"Poisson\",\"TMBpoisson\")[c(7,8,16)],   randomEffects = NULL,   randomEffects2 = NULL,   selectCriteria = \"BIC\",   DoCrossValidation = TRUE,   CIval = 0.05,   VarCalc = \"Simulate\",   useParallel = TRUE,   nSims = 100,   plotValidation = FALSE,   trueVals = NULL,   trueCols = NULL,   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"details-and-guidance-on-using-models","dir":"Articles","previous_headings":"","what":"Details and guidance on using models","title":"BycatchEstimator User Guide","text":"bycatchFit function provides many options observation error model groups (modelTry) allow users flexibility setting models. However, many models (e.g. normal, Poisson) unlikely effective. practice, negative binomial (1 2), delta-lognormal Tweedie work applications, glmmTMB versions run quickly. section provides details model fit selection works, guidance selecting models.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"glm-model-types","dir":"Articles","previous_headings":"Details and guidance on using models","what":"GLM model types","title":"BycatchEstimator User Guide","text":"Generalized linear models (GLM) vary whether assume y data 0 1 (binomial), counts (negative binomial), real numbers (others), model mean model variance data. user selects model, code automatically sets details (e.g. link functions, response variables, offsets) explained . code takes Catch Effort inputs calculates CPUE Catch/Effort sample unit. Presence zero Catch zero 1 otherwise. binomial models presence/absence data, used estimate probability presence, expected CPUE. binomial, mean probability positive observation modeled logit link, meaning log odds positive observation predicted linear model. model may used estimate bycatch rare species one ever caught time, also used model positive versus zero observations delta models (see ). negative binomial using glm.nb function MASS library (Venables Ripley (2002)) nbinom2 glmmTMB library(Brooks et al. (2017)) ordinary negative binomial, variance : σ2=μ+μ2/θ\\sigma^2=\\mu+\\mu^2/\\theta θ\\theta estimated parameter. nbinom1, variance defined : σ2=μ(1+α)\\sigma^2= \\mu(1+\\alpha) α\\alpha estimated parameter. version negative binomial model, equivalent quasi-Poisson model, gives somewhat different results negative binomial models. estimated values θ\\theta α\\alpha given “scale” column parameter summary table. negative binomial models predict integer counts, appropriate modeling bycatch numbers per sample unit. model catch per unit effort (CPUE) sample unit(e.g. set) might different amount effort (e.g. hook-hours) necessary include effort offset model. use log link negative binomial models, model predicts: log(Ci)=b0+b1x1+offset(log(Ei))log(C_i)=b_0+ b_1x_1+offset(log(E_i)) CiC_i catch sample unit ii observer data, b0+b1x1b_0+ b_1x_1 example linear predictor intercept slope, offset log effort EiE_i trip. algebraically equivalent modeling CPUE function linear predictors, e.g. log(Ci/Ei)=b0+b1x1log(C_i/E_i)=b_0+ b_1x_1 model can used predict CPUE inputting Effort=1, predict catch inputting Effort sample unit. code sets offset automatically, don’t put simpleModel complexModel. However, best models shown output tables show full formula R formula format, e.g. formula y=1+x1+offset(log(Effort))y=1 + x_1+offset(log(Effort)), 1 indicates intercept, offset distinguished predictor variables keyword “offset”. Negative binomial models work well, even rare species, data counts numbers animals caught, model can handle large numbers zero observation low estimated mean. allow negative binomial models also used catch bycatch measured weight (.e. non-integer values), code rounds catches integers running model. catches less 0.5, rounded 0, might want change scale using negative binomial models (e.g., multiply 10). Poisson distribution, available modelTry = “Poisson” “TMBpoisson” works negative binomial except estimated scale parameter, defines variance equal mean. Poisson appropriate completely random count data either clumped overdispersed. generally work well Negative Binomial, included comparison. may worth using scale parameter negative binomal 1 2 implies variance similar mean (.e. large value scale parameter nbinom2, small value near zero nbinom1 implies variance close mean). Tweedie distribution (“Tweedie” “TMBtweedie” modelTry) generalized function estimates distribution similar Gamma distribution, except allows extra probability mass zero. thus appropriate either continuous integer data extra zeros. uses log link, , addition linear predictor log(mean) CPUE, estimates index parameter pp dispersion parameter ϕ\\phi together determine shape distribution. variance σ2=ϕμp\\sigma^2=\\phi \\mu^p. Delta-lognormal models work applying binomial model presence absence (0,1) bycatch species sample unit estimate probability presence. , mean CPUE conditional species present calculutated fitting lognormal Gamma model positive observations . delta lognormal models, CPUE log transformed, mean CPUE positive observations modeled positive data . delta-Gamma method, log link used model positive CPUE values. lognormal Gamma component fitted positive CPUE observations, possible levels factors data (.e species never observed strata). case, see warning variables may dropped model. years don’t data year predictor variable, delta models applied. Delta models work rare species small sample sizes require least positive observations across range variables lognormal Gamma models meaningful. Simple normal, lognormal Gamma options also available. Lognormal Gamma models run CPUE data, including zeros, adding constant 0.1, subtracted making predictions. models unlikely work rare species, included comparison.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"model-selection-with-information-criteria","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Model selection with information criteria","title":"BycatchEstimator User Guide","text":"Within observation error model group, information criteria used find best model. MuMin dredge function fitting nested models complex simplest. example, complexModel y∼Year*seasony\\sim Year*season, model Year, season interaction y∼Year+season+Year:seasony\\sim Year+season+Year:season, simpleModel Null model y∼1y\\sim 1, models included : y∼Year+season+Year:seasony\\sim Year+season+Year:season y∼Year+seasony\\sim Year+season y∼Yeary\\sim Year y∼seasony\\sim season y∼1y\\sim 1 recommended model selection criterion BIC BIC less likely prefer overly complex models sample size large (Burnham Anderson (2004)). Information criteria work weighing tradeoff model fit model complexity. AIC AIC=−2log(L)+2kAIC=-2log(L)+2k L likelihood, −2log(L)-2log(L) model deviance, kk number parameters. lower deviance (higher likelihood) implies better model fit. However, complexity penalty 2k2k means added parameter (e.g. another predictor variable coefficient) must reduce deviance 2 units improve fit enough worth extra parameters. BIC BIC=−2log(L)+nkBIC=-2log(L)+nk nn total sample size. Thus, complexity penalty increases sample size. desirable large datasets , AIC, complex proposed model almost always preferred even explained little model deviance. MuMin summary table (model summary file separate CSV) includes information criteria model considered, well model weights calculated information criterion user specified, wi=−0.5Δi/∑(−0.5Δi)w_i=-0.5\\Delta_i/\\sum(-0.5\\Delta_i), delta Δi\\Delta_i difference information criteria model ii best model. Model weights sum one indicate degree support model data (Barton (2020)). best model highest weight lowest Δ\\Delta. , cases models may also strong support, perhaps considered, particularly simpler. current version code use MuMIn’s model averaging function, may worth considering several models similar weights. model selection table also includes information criteria, can see consistent. also provide value pseudo R2R^2 model output table. calculated using r.squaredGLMM function (Barton (2020)), can interpreted rough measure variance explained model. However, note high R2R^2 values may needed bycatch estimation; R2R^2 measures accurately sample unit’s bycatch can predicted, total bycatch summed many sample units, may quite accurate even variation sample units well explained. deciding sets predictor variables use, keep mind following. observer program set stratified random sampling design, meaning observer coverage level varies stratify defined factor variables Year, area, season, geartype, etc., variables included model avoid bias caused oversampling strata atypical bycatch rates. extreme example, suppose observer program allocated extra observers strata (particular gear area) recent years strata known higher bycatch species interest. case, necessary include gear, season, year, area least interactions model allow model localize high bycatch rates strata. example, appropriate complexModel might y∼Year*area*geary\\sim Year*area*gear. equivalent y∼Year+area+gear+Year:area+Year:gear+area:gear+Year:area:geary\\sim Year+area+gear+Year:area+Year:gear+area:gear+Year:area:gear model possible interactions allows strata estimated bycatch rate, similar design-based estimator stratification variables pooling. course, necessary data combinations variables fit model, often happen, even large sample sizes gear types used areas. alternative approach include variable called example gearArea combined two variables, avoid need estimate non-exsistent combinations. Another options include interactions random effects make estimable (Ortiz Arocha (2004)). sample sizes small species rare, may possible estimate bycatch rates Year separately (.e. include year factor variable simpleModel), although annual estimates total bycatch often needed. One possible solution require Year model, including simpleModel. example, setting simpleModel null model y∼1y\\sim1 allows information criteria used find best model, even include Year variable. model still produce separate estimates Year, model predicts bycatch recorded logbook effort, effort lead estimated bycatch even model estimates CPUE sample units. Another possible approach include 2-year 3-year periods factor variable, rather Year. , Year still bycatch estimate, model predictions bycatch rate can estimated model include Year specficially variable. Finally, Year can input numeric variable. approach can useful model consistent increase decrese time. numeric Year, model y∼Yeary\\sim Year estimate linear trend across years. Polynomial regression may useful way estimate complex trends across years data sets years enough data estimate Year categorical fixed effect. can specified , example y∼Year+(Year2)+(Year3)y \\sim Year + (Year^2) + (Year^3). considering including additional variables model, Year stratification variables used sampling design, key consideration whether variable available, interpretation, observer logbook data. example, analyst might want include gear description variable influences catch rates observer data. However, logbook data may exact information effort. case, even variable improve predictive skill (.e R squared) model fitted observer data, useful CPUE standardization observer data, use total bycatch estimation.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"model-residuals-and-residual-diagnostics","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Model residuals and residual diagnostics","title":"BycatchEstimator User Guide","text":"best model (according information criterion) observation error model group, ordinary residuals DHARMa scaled residuals plotted (also called quantile PIT probability integral transform residuals), DHARMa diagnostics calculated (Hartig (2020)). DHARMa library uses simulation generate quantile residuals based specified observation error model results clearly interprettable ordinary residuals non-normal models. DHARMA draws random predicted values fitted model generate empirical predictive density data point calculates fraction empirical density greater true data point. Values 0.5 expected, values near 0 1 indicate mismatch data model. Particularly binomial negative binomial models, ordinary residuals normally distributed, DHARMa residuals better representation whether data consistent assumed distribution.(See DHARMa vignette (Hartig (2020)) good explanation interpet quantile residuals.) regular residuals DHARMa residuals appropriate lognormal Gamma models, since model continuous data expected approximately normal transformed link function. model output file shows table P values Kolmogorov-Smirnoff test whether DHARMa residuals uniformly distributed expected, test -dispersion, test zero-inflation (meaningless delta models, helpful see negative binomial tweedie models adequately model zeros) test whether outliers expected. models used analyses, DHARMA residuals uniformly distributed, indicated QQUniform plot (small datasets) Kolmogorov-Smirnov test uniformity. DHARMA residuals show substantial -dispersion model appropriate. general,well-specified model show points along line DHARMa qqnorm plots, points scattered 0 1 pattern DHARMa residual plot. large datasets, violations assumptions matter less model fitting. However, better select model group obvious deviations form model assumptions DHARMa residual plots. models fit, code keeps track whether model converged correctly, , went wrong. model fit summary table model results file shows “-” models converged successfully, “data” models fit due insufficient data (positive observations year prevents fitting delta models), “fit” models failed converge, “cv” models produced results unreasonably high CVs (>10). Models fail ways discarded used cross validation bycatch estimation. get one errors model want use, check data checking figures tables missing combinations predictor variables, extreme outliers, years positive observations.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"cross-validation","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Cross validation","title":"BycatchEstimator User Guide","text":"Cross-validaton method identify models perform well --sample prediction, meaning predicting values y data points used fit original observations. observation error models converged produced reasonable results complete data set used cross validation. example, enough positive observations years estimate delta-lognormal delta-Gamma models, included cross validation. cross validation, observer data randomly divided 10 folds. fold left one time models fit 9 folds. predictor variables chosen best model full dataset used fold full data set save time. fitted model used predict CPUE left fold, root mean square error calculated : RMSE=1n∑=1n(yî−yi)2RMSE =\\frac{1}{n}\\sum_{=1}^{n}(\\hat{y_i}-y_i)^2 n number observed trips y CPUE data left-tenth observer data, ŷ\\hat{y} CPUE predicted model fitted 9/10th observer data. model lowest mean RMSE across 10 folds selected best model. Mean error () also calculated indicator whether model systematic bias. =1n∑=1nyî−yiME =\\frac{1}{n}\\sum_{=1}^{n}\\hat{y_i}-y_i Note cross-validation done one random draw data. use cross-validation model selection appropriate one draw. intended diagnose large problems model predictive ability. practice, many data sets cross-validation shows many models perform similarly, make similar estimates total bycatch.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"total-bycatch-calculation","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Total bycatch calculation","title":"BycatchEstimator User Guide","text":"model group, best model, selected information criteria, used estimate total bycatch exception binomial, model estimates total number positive trips. binomial model, best model used predict probability positive observation logbook trip summed get total number positive trips year (stratum stratification requested). number positive trips calculated , rare species never caught trip, number positive trips good estimate total bycatch many models fail converge. common species, estimates total catch appropriate, results binomial model alone included cross validation model comparison. calculate total bycatch models, model predicts catch sample unit logbook data models fitted observer data sums sample units get total baycatch. negative binomial models, log(effort) logbook trips used offset predictions, along values predictor variables, model can predict bycatch logbook sample unit directly. Tweedie normal models predict CPUE, multiplied effort. Delta-lognormal delta-Gamma models separate components probability positive observation CPUE positive, must multiplied together (appropriate bias corrections) multiplied effort get total catch. Catch sample summed across sample get total catch year. variance prediction sample calculated variance prediction interval, variance estimated mean prediction plus residual variance. variances summed across sample units get variance total catch estimate year. predicted catches logbook trip dependent linear model coefficients, across multiple trips, trips independent; thus, variances added without accounting covariance. variance total catch year thus calculated either using Monte Carlo simulation, using delta method (described ). Users may also chose estimate variances large logbook datasets methods work. case unobserved bycatch estimated, observed bycatch added predictions known constant variance. delta method variance available delta-lognormal, delta-Gamma Tweedie models using cplm, although available Tweedie using glmmTMB. delta-lognormal models, variance predicted CPUE needed bias-correct converting mean predicted log(CPUE) mean predicted CPUE. variance prediction interval trip calculated variance estimated mean plus residual variance, value used bias correction. total predicted CPUE predicted probability positive observation binomial times predicted positive CPUE, predicted catch predicted CPUE times effort. variance total CPUE calculated using method Lo, Jacobson, Squire (1992). Monte Carlo variance estimation method, first draw random values linear model coefficients multivariate normal distribution mean variance/covariance matrix estimated model. predictions trip drawn draw parameters using appropriate probability density function (e.g. Tweedie, negative binomial) additional parameters (e.g. residual variance, negative binomial dispersion, Tweedie pp ϕ\\phi) estimated model. Trips summed year (adding observed catch necessary) within draw, mean, standard error, quantiles (e.g. 2.5% 97.5% 95% confidence interval) calculated across Monte Carlo draws. approximation total variance predicted bycatch can also made using delta method. delta method approximates variance function variable derivative function squared times variance original variable. Thus, variance prediction intervals original data scale calculated pre post multiplying derivative inverse link function variance covariance matrix predicted values. Σp=JΣlJ′\\Sigma_p = J \\Sigma_l J' Σl\\Sigma_l variance covariance matrix predicted trips stratum scale log link, J matrix derivatives. See function MakePredictionsDeltaVar bycatchFunctions.R details model type. code partly based method developed https://stackoverflow.com/questions/39337862/linear-model--lm---get-prediction-variance--sum--predicted-value. delta method available delta-Gamma, delta-lognormal, Tweedie via cplm library. error models, simulation method used even delta method selected VarCalc. logbook data aggregated across multiple trips (e.g. strata) effort allocated equally trips row logbook data table purpose simulating catches estimating variances using delta method. allocation procedure needed estimate mean total bycatch, necessary estimate variances correctly. using aggregated effort, yet possible include observed catches known.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"grouping-and-aggregation-in-data","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Grouping and aggregation in data","title":"BycatchEstimator User Guide","text":"final consideration data setup models use sample unit. longline fishery, example, bycatch estimation often done set--set data. However, observers allocated vessel-trips, sets, sets within trips correlated, using sets sample unit without modeling within vessel-trips correlation might introduce bias total bycatch variance calculations. example, 10% sets sampled vessel-trip area, representative fishery. sets similar, estimated bycatch may biased, confidence intervals narrow. One solution problem put vessel vessel-trip model random effect. effect correctly modeling grouping data withing vessel-trips, probably statistically correct way deal problem. Another solution use trips sample unit. case, observer data include bycatch effort across sets trip, elimimating problem correlation sets. advantage reducing sample size correctly account number independent samples (vessel-trips), variance esimates correct. method work important variables included set level, , example, depth zone stratification variable vessel-trips may fish one depth-zone. trips fish multiple depth-zones (variable) common one can assigned trip without much loss information. See Babcock et al. (2018) example method used sea turtle bycatch shrimp trawls.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"abundance-index-calculation","dir":"Articles","previous_headings":"Details and guidance on using models","what":"Abundance index calculation","title":"BycatchEstimator User Guide","text":"user requests annual abundance index, also calculated best model model group. annual abundance index calculated setting variables year, variables required included index (e.g. region fleet) reference level, mean numerical variables common value categorical variables. index calculated predicting mean CPUE year, standard error calculated standard error mean prediction. delta-lognormal delta-Gamma models standard error prediction calculated means standard errors binomial positive catch models using method Lo, Jacobson, Squire (1992). set EstimateBycatch FALSE, EstimateIndex TRUE, bycatchFit can estimate CPUE abundance index dataset. dataset used index estimated “obsdat” even logbook dataset, model applied dataset labelled “obsdat”. advice CPUE standardization, see papers Ortiz Arocha (2004), Maunder Punt (2004) Hoyle et al. (2024).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"loading-outputs-for-futher-plotting-and-analysis","dir":"Articles","previous_headings":"","what":"Loading outputs for futher plotting and analysis","title":"BycatchEstimator User Guide","text":"may use function load loadOutputs read either model-based design-based results, specifying runName, runDate, character vectors values designScenario /modelScenario. function returns list, including: setupObj original setupObj run designObjList results across designScenarios including bycatchInput bycatchOutput lists. ModelObjList results across modelScenarios including modelInput modelOutput lists. runName allYearEstimates long-format data-frame results design-based model-based estimate design model scenarios requested. one species catchtype run, included. columns Scenario (design model), Common (common name), Species (scientific name), CatchType, Source (method model used estimation), Run (run name), well Year, Total, Total Var, Total.mean, TotalLCI, TotalUCI, Total.se, Total.cv, column called Valid, 1 valid models methods, 0 models problem model fitting. data-frame appropriate ggplot. results multiple runs can also combined, bind_rows. code produce data frame results scenarios species runs togehter, distinguished column called “Run”. Within list returned loadOutputs,results designOutputs modelOutputs include: ModFits, list species, containing lists model fits. modpredVals, list species, containing list tibbles bycatch. allmods, long format tibble model annual predictions together, included allYearEstimates Allindex, abundance indices calculated. design-based results: designyeardf, annual estimate bycatch, .csv file poolingSum, pooling summary data, .csv file yearSumGraph, annual summaries formula model outputs allmods, combined allYearEstimates","code":"library(tidyverse) #for data manipulation and ggplot #Load in both design and model based estimates allResults<-loadOutputs(baseDir = getwd(),                       runName= \"Simulated\",                       runDate =  Sys.Date(),                       designScenarios = \"withPooling\",                       modelScenarios = \"s1\" ) #Plot all together ggplot(allResults$allYearEstimates,aes(x=Year,y=Total,                                        ymin=TotalLCI,ymax=TotalUCI,                       fill=Source,color=Source))+   geom_line()+   geom_ribbon(alpha=0.4)+   theme_bw() Run1<-loadOutputs(baseDir = getwd(),                   runName = \"Run1\",                   designScenarios = c(\"noPool\",\"Pool1\"),                   modelScenarios = c(\"s1\",\"s2\")) Run2<-loadOutputs(baseDir = getwd(),                   runName = \"Run2\",                   designScenarios = c(\"noPool\",\"Pool1\"),                   modelScenarios = c(\"g1\",\"g2\")) allRuns<-bind_rows(Run1,Run2)"},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"validation-and-conclusions","dir":"Articles","previous_headings":"","what":"Validation and conclusions","title":"BycatchEstimator User Guide","text":"Although code automates much process bycatch estimation, including model selection, important keep mind results correct assumptions method met. methods expanding sample (e.g. observer data) total fishery (e.g. logbooks) dependent assumption sample representative whole fishery. assumption may violated many cases , example: certain kinds vessels take observers (e.g. larger vessels room observers, ports sectors cooperative). Fishers behave differently observers present, example avoiding bycatch observer data used enforcement. observer program allocates observers non-randomly, without adequately documenting allocation criteria, allocation changed time. Observer data includes information extra trips, usual observer monitoring, specifically targeted research purpose, e.g. bycatch mortality study, extra trips strata bycatch known problem. Observer data combined multiple sources, clear components fishery covered (e.g. observers placed different programs different gear target species, vessels participate ). Total effort data representative fishery, example fishers report effort, effort inferred landings records, units effort interpreted way logbooks vs. observer data. reasons, ’s important validate bycatch estimates possible. One possible validation technique use bycatch estimate method estimate total catch landed species, compare total landings. total landings several target species estimated bycatchEstimtor tool consistent recorded landings weighed fish landing sites, indicates observer data representative fishery. estimates consistent known landings, one problems listed may exist. cases including additional stratification predictor variables may resolve problem (e.g. vessel size, indicator variable different observer programs different sampling strategies). model-based estimation, recommended final model used without looking closely outputs. selected model must good fits reasonably consistent data according DHARMa residuals. results appear reasonable around scale ratio estimator results. model overly complex. Also, look model selection table see models also supported data. model-based estimates different design-based estimates, important understand differ. cases, model results using additional variables (e.g. variables giving details fishing gear fish habitat), model-based estimates may better. guidance bycatch estimation, see simulation papers published ICCAT (Babcock et al. (2022), Babcock et al. (2023)).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/articles/UserGuide2.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"BycatchEstimator User Guide","text":"Descriptions columns outputs function. bycatchSetup function DataSummary/StrataSummary tables: Year Eff: effort logbook data Units: sample units logbook data OCat: observed catch (observer data) OEff: observed effort (observer data) Ounit: observed sample units (observer data) CPUE: mean catch per unit effort CPse: standard error CPUE : count outliers defined data points 8 SD mean Pos: number sample units positive observations (presence) OCatS: standard deviation observed catch OEffS: standard deviation observer effort Cov: covariance matrix PFrac: fraction positive observations (positive observations divided observed sample units) EFrac: fraction effort observed (observed effort divided logbook effort) UFrac: fraction sample units observed (observed sample units divided logbook sample units) Cat: estimated catch using unstratified ratio estimator (observed catch divided observed effort raised logbook effort) Cse: standard error estimated catch bycatchDesign function Pooling.csv file: Year totalUnits: sum sample units logbook data totalEffort: sum effort logbook data units: sum sample units observer data effort: sum effort observer data pooled.n: number sample units don’t need pooling (observer sample units > minStrataUnit) poolnum: number sample units pooling occurred? pooledTotalUnits: pooled total sample units (logbook data) pooledTotalEffort: pooled total effort (logbook data) DesignYear/DesignStrata tables: Year ratioMean: mean bycatch calculated ratio estimator ratioSE: standard deviation ratio estimator deltaMean: mean bycatch calculated delta estimator deltaSE: standard deviation delta estimator bycatchFit function AnnualSummary/StratumSummary tables: Year Total: estimated total bycatch Totalvar: variance estimated total bycatch Total.mean: mean across simulations (VarCalc = Simulate) TotalLCI: lower confidence interval bound TotalUCI: upper confidence interval bound Total.se: standard error estimated total bycatch Total.cv: coefficient variation ModelSelection tables: cond..Int: intercept conditional model disp..Int: intercept dispersion model AICc, AIC, BIC: model information criteria (lower better) df: degrees freedom logLik: log-likelihood model selectCriteria: criteria actually used rank models delta: difference selection criteria best model weight: Akaike weights (relative support model) Index tables: Index: mean cpue SE: standard error mean cpue lowerCI: lower bound confidence interval upperCI: upper bound confidence interval crossvalSummary table: model: model type formula: formula BIC best model RMSE: root mean square error : mean error modelSummary table: KS.D: value Kolmogorov-Smirnov test uniformity residuals KS.p: p-value Kolmogorov-Smirnov test uniformity residuals Dispersion.ratio: value dispersion test (residuals variance), compares ratio observed simulated residuals Dispersion.p: p-value dispersion test ZeroInf.ratio: value zero inflation test compared ratio observed expected zeros ZeroInf.p: p-value zero inflation test Outlier: outlier test, number residuals outside expected 95% confidence interval Outlier.p: p-value outlier test rmse tables: values mean error () mean square error (RMSE) fold cross validation","code":""},{"path":[]},{"path":"https://ebabcock.github.io/BycatchEstimator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elizabeth Babcock. Author, maintainer. William Harford. Contributor. Ana Adao. Contributor.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Babcock E (2025). BycatchEstimator: Generic Model-Based Bycatch Estimation Procedure. R package version 1.0.0.000, https://ebabcock.github.io/BycatchEstimator/.","code":"@Manual{,   title = {BycatchEstimator: Generic Model-Based Bycatch Estimation Procedure},   author = {Elizabeth Babcock},   year = {2025},   note = {R package version 1.0.0.000},   url = {https://ebabcock.github.io/BycatchEstimator/}, }"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"bycatchestimator-","dir":"","previous_headings":"","what":"Generic Model-Based Bycatch Estimation Procedure","title":"Generic Model-Based Bycatch Estimation Procedure","text":"BycatchEstimator uses model-based design-based procedures estimate total annual bycatch expanding sample, observer database total effort logbooks landings records. model framework can also used estimate annual index abundance, calculated observer data. See User’s Guide articles https://ebabcock.github.io/BycatchEstimator/ details. source code https://github.com/ebabcock/BycatchEstimator. development version Shiny app runs data checks described , go https://natureanalytics.shinyapps.io/BycatchEstimator/","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generic Model-Based Bycatch Estimation Procedure","text":"code runs best R studio. running code first time, install latest versions R RStudio. output figures tables can printed html pdf file using R Markdown knitr library, outputs LaTex file. want results pdf format, must LaTex program installed, TinyTex (https://yihui.org/tinytex/). default results printed html file, can extract figures tables. can install development version BycatchEstimator GitHub : help installation, see Installation Guide https://ebabcock.github.io/BycatchEstimator/ Also, see video tutorial https://miami.zoom.us/rec/share/ec4dqzeZ4s_fuoVM8wb6B-a5npAwZZfV9tNciZpGaUMcQAYVLrJiWXQo5yXWjfVl.9Sl_3METqgD8O5l0?startTime=1751276745000 Passcode: gZ!tK8!n used older versions tool, see article adjust code use new version articles https://ebabcock.github.io/BycatchEstimator/","code":"# install.packages(\"devtools\") devtools::install_github(\"ebabcock/BycatchEstimator\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Due complication coding, user must load library(MuMIn) addition library(BycatchEstimator).","code":"library(BycatchEstimator) library(MuMIn)"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"llsim-example","dir":"","previous_headings":"","what":"LLSIM Example","title":"Generic Model-Based Bycatch Estimation Procedure","text":"demonstrate use, example data sets included R package. example, use data sets LLSIM (Goodyear 2021).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"logbook-data","dir":"","previous_headings":"LLSIM Example","what":"Logbook data","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Simulation longline fleets LLSIM conducted using three idealized fleets described Goodyear (2021). fleets USA-like fleet (fleet 1), Japan-like fleet (fleet 2) Brazil-like fleet (fleet 3). simulated data set included three fleets, data spanning 1990 2018 reflect approximate period observer coverage established. species distribution model (SDM) longline simulator generates 3-dimensional distribution blue marlin swordfish throughout Atlantic Ocean based habitat preferences species. Simulated longline sets generated distributing hooks throughout habitat species, consistent distribution, gear, hooks floats, use lightsticks characteristics historical longline fishing fleets. LLSIM initially produces set-level catches, logbooks observer databases allocated trip (Babcock Goodyear 2021). Sets allocated trip gear, month spatial area (5 x 5 squares). Trips 100 sets randomly allocated different trips median trips 20 sets.","code":"LLSIM_BUM_Example_logbook"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"observer-program-data","dir":"","previous_headings":"LLSIM Example","what":"Observer program data","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Observer program data generated passing trip-level logbook data observer program sub-model. observer sub-model assumes observer coverage randomly assigned trips, 5% coverage trips. entire trip assumed observed.","code":"LLSIM_BUM_Example_observer"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"data-setup","dir":"","previous_headings":"LLSIM Example","what":"Data setup","title":"Generic Model-Based Bycatch Estimation Procedure","text":"first step bycatch estimation set input file review data. returned value bycatchSetup assigned object used subsequent steps. first step also produces html output (default) saved working directory user review. html output contains summary figures tables showing sample size presence/absence bycatch species across levels predictor variables, observer coverage levels, raw trends CPUE. bycatchSetup also indicate missing data NAs warning messages console printed messages html output.","code":"setupObj<-bycatchSetup(   obsdat = droplevels(LLSIM_BUM_Example_observer[LLSIM_BUM_Example_observer$Year>2010 &LLSIM_BUM_Example_observer$fleet==2,]),   logdat = droplevels(LLSIM_BUM_Example_logbook[LLSIM_BUM_Example_logbook$Year>2010 & LLSIM_BUM_Example_logbook$fleet==2,]),   yearVar = \"Year\",   obsEffort = \"hooks\",   logEffort = \"hooks\",   obsCatch = c(\"SWO\",\"BUM\")[2], # selecting Blue marlin catch   catchUnit = \"number\",   catchType = \"catch\",   logNum = NA,   sampleUnit = \"trips\",   factorVariables = c(\"Year\",\"area\",\"season\"),   numericVariables = NA,   EstimateBycatch = TRUE,   baseDir = getwd(),   runName = \"LLSIMBUMtripExample\",   runDescription = \"LLSIMBUM by trip\",   common = c(\"Swordfish\",\"Blue marlin\")[2], # selecting Blue marlin   sp = c(\"Xiphias gladius\",\"Makaira nigricans\")[2], # selecting Blue marlin   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"design-based-estimators","dir":"","previous_headings":"LLSIM Example","what":"Design-based estimators","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Estimation bycatch using design-based estimators done bycatchDesign, requiring output bycatchSet inputs. uses stratified ratio estimator stratified delta-lognormal estimator, stratification variables defined user. deal strata observations observations, user may request pooling, specify minimum number sample units needed avoid pooling. bycatchDesign also produces html pdf output results specified directory.","code":"designObj <- bycatchDesign(   setupObj = setupObj,   designScenario = \"noPool\",   designMethods = c(\"Ratio\", \"Delta\"),   designVars = c(\"Year\",\"area\",\"season\"),   designPooling = FALSE,   poolTypes=c(\"adjacent\",\"all\",\"none\"),   pooledVar=c(NA,NA),   adjacentNum=c(1,NA),   minStrataUnit = 1,   reportType=\"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"model-based-estimators","dir":"","previous_headings":"LLSIM Example","what":"Model-based estimators","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Estimation bycatch /index abundance carried using function bycatchFit. function requires object produced bycatchSetup. Bycatch estimation carried running linear models based user-defined statistical distributions observation error models (e.g. delta-lognormal, negative binomial) predictor variables (e.g., year, season, depth). task identifying best approximating model addressed semi-automated model selection process based user’s choice information criteria (AICc, AIC BIC) cross validation. best approximating model identified, standardized CPUE model used predict total bycatch logbook trips summing across trips. user needs define complex model configuration simple model configuration, function fit models . Random effects can also specified, user needs opt-cross validation. default method variance calculation simulation method, options available. bycatchFit also produces html pdf output results specified directory.","code":"bycatchFit(   setupObj = setupObj,   modelScenario = \"s1\",   complexModel = formula(y~Year+area),   simpleModel = formula(y~Year),   indexModel = formula(y~Year),   modelTry = c(\"TMBnbinom1\",\"TMBtweedie\"),   randomEffects = NULL,   randomEffects2 = NULL,   selectCriteria = \"BIC\",   DoCrossValidation = TRUE,   CIval = 0.05,   VarCalc = \"Simulate\",   useParallel = TRUE,   nSims = 100,   plotValidation = FALSE,   trueVals = NULL,   trueCols = NULL,   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"optionally-reload-model-results-for-plotting","dir":"","previous_headings":"LLSIM Example","what":"Optionally reload model results for plotting","title":"Generic Model-Based Bycatch Estimation Procedure","text":"function loadOutputs reads R objects analysis, well data frame called allYearEstimates appropriate plotting ggplot.","code":"allResults<-loadOutputs(baseDir = getwd(),                       runName= \"LLSIMBUMtripExample\",                       runDate =  Sys.Date(),                       designScenarios = \"noPool\",                       modelScenarios = \"s1\" ) #Plot all together ggplot(allResults$allYearEstimates,aes(x=Year,y=Total,                                        ymin=TotalLCI,ymax=TotalUCI,                       fill=Source,color=Source))+   geom_line()+   geom_ribbon(alpha=0.4)+   theme_bw()"},{"path":"https://ebabcock.github.io/BycatchEstimator/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generic Model-Based Bycatch Estimation Procedure","text":"Goodyear, C.P. 2021. Development new model fisheries simulating longline catch data LLSIM. Collect. Vol. Sci. Pap. ICCAT, 78(5): 53-62 Babcock, E.. C. P. Goodyear. 2021. Testing bycatch estimation tool using simulated blue marlin longline data. ICCAT Collective Volume Scientific Papers, 78(5): 179-189. Babcock E. ., W. J. Harford, T. Gedamke, D. Soto, C. P. Goodyear. 2022. Efficacy bycatch estimation tool. ICCAT Collective Volume Scientific Papers 79(5): 304-339 Babcock, E. ., W. J. Harford, T. Gedamke, S. Anderson, C. P. Goodyear. 2023. Simulation-Testing Model-Based Design-Based Bycatch Estimators. ICCAT Collective Volume Scientific Papers 80 (6): 51–79.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch Estimator — BycatchEstimator-package","title":"Bycatch Estimator — BycatchEstimator-package","text":"Generic Model-Based Bycatch Estimation Procedure","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bycatch Estimator — BycatchEstimator-package","text":"code can estimate total bycatch, calculated expanding sample, observer database, total effort logbooks landings records, annual index abundance, calculated observer data.","code":""},{"path":[]},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/BycatchEstimator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bycatch Estimator — BycatchEstimator-package","text":"Maintainer: Elizabeth Babcock ebabcock@rsmas.miami.edu contributors: William Harford bill@natureanalytics.ca [contributor] Ana Adao aadao@natureanalytics.ca [contributor]","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositives.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","title":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","text":"Function look positive zero observations across levels multiple factors","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to look for positive and zero observations across levels of multiple factors — CheckForPositives","text":"","code":"CheckForPositives(datval, species, variables)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Same for plotting — CheckForPositivesPlot","title":"Same for plotting — CheckForPositivesPlot","text":"plotting","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same for plotting — CheckForPositivesPlot","text":"","code":"CheckForPositivesPlot(datval, species, variables)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/CheckForPositivesPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same for plotting — CheckForPositivesPlot","text":"datval Value species Value variables Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fit a specified model formula and print outputs — FitModelFunc","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"Function fit specified model formula print outputs","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"","code":"FitModelFunc(formula1, formula2, modType, obsdatval, outputDir)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fit a specified model formula and print outputs — FitModelFunc","text":"formula1 Value formula2 Value modType Value obsdatval Value outputDir Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"Function fit specified model formula print outputs Cross validation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"","code":"FitModelFuncCV(formula1, modType, obsdatval)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/FitModelFuncCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fit a specified model formula and print outputs for Cross validation — FitModelFuncCV","text":"formula1 Value modType Value obsdatval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/Gm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Pennington(1983) method — Gm","title":"Function for Pennington(1983) method — Gm","text":"Output result Gm(t) function use calculations design based delta estimator","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/Gm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Pennington(1983) method — Gm","text":"","code":"Gm(m, t, jmax = 10)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/Gm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Pennington(1983) method — Gm","text":"m m number non-zero values t t real number input jmax jmax upper limit infinute sum used calculations. 10 usually sufficient","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":null,"dir":"Reference","previous_headings":"","what":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"LLSIm BUM trip, 5% observer coverage including observed catch","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"","code":"LLSIM_BUM_Example_logbook"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"tibble 25 columns. row fishing trip. trip Trip idenifier Year Year month month year gear Gear code light Light code fleet Fleet number bait Bait code hook Hook code hooks Effort variable, hooks sets Number sets trip SWO Swordfish catch numbers BUM Blue marlin catch numbers lat5 Latitude assigned 5 degree grid lon5 Longitude assigned 5 degree grid lat Trip latitude lon Trip longitude hbf Hooks floats habSWO SDM habitat variable swordfish habBUM SDM habitat variables blue marlin season Categorical season variable area Categorical season variable unsampledEffort Unsampled effort","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_logbook.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LLSIM-based example logbook program data set — LLSIM_BUM_Example_logbook","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"LLSIm BUM trip, 5% observer coverage including observed catch","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"","code":"LLSIM_BUM_Example_observer"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"tibble 22 columns. row fishing trip. trip Trip idenifier Year Year month month year gear Gear code light Light code fleet Fleet number bait Bait code hook Hook code hooks Effort variable, hooks sets Number sets trip SWO Swordfish catch numbers BUM Blue marlin catch numbers lat5 Latitude assigned 5 degree grid lon5 Longitude assigned 5 degree grid lat Trip latitude lon Trip longitude hbf Hooks floats habSWO SDM habitat variable swordfish habBUM SDM habitat variables blue marlin season Categorical season variable area Categorical season variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/LLSIM_BUM_Example_observer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LLSIM-based example observer program data set — LLSIM_BUM_Example_observer","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to make data summarizes including ratio estimate at — MakeSummary","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"stratification defined strataVars. pooling missing strata","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"","code":"MakeSummary(obsdatval, logdatval, strataVars, EstimateBycatch, startYear)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/MakeSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to make data summarizes including ratio estimate at — MakeSummary","text":"obsdatval Value logdatval Value strataVars Value EstimateBycatch Value startYear Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"Function plots residuals R Dharma library calculate residual diagnostics.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"","code":"ResidualsFunc(   modfit1,   modType,   fileName = NULL,   nsim = 250,   plotResiduals = TRUE )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ResidualsFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function plots residuals with both R and Dharma library and calculate residual diagnostics. — ResidualsFunc","text":"modfit1 Value modType Value fileName Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/addR2.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a column of R squared values from input of a MuMin dredge table — addR2","title":"Return a column of R squared values from input of a MuMin dredge table — addR2","text":"Return column R squared values input MuMin dredge table","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/addR2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a column of R squared values from input of a MuMin dredge table — addR2","text":"","code":"addR2(dredgeTable, obsdatval, funcName)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/addR2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a column of R squared values from input of a MuMin dredge table — addR2","text":"dredgeTable dredge output MuMin obsdatval observer data funcName function used fitting (e.g. glm glmmTMB)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaDivide.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","title":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","text":"Function divide areas. Input grid areas, returns East vs. West","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaDivide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to divide up areas. Input grid areas, returns East vs. West — areaDivide","text":"","code":"areaDivide(area)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaGOM.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","title":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","text":"Function convert new areas old areas Kevin McCarthy","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areaGOM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert new areas to old areas from Kevin McCarthy — areaGOM","text":"","code":"areaGOM(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areafunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","title":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","text":"Stratum designations Scott-Denton paper, shrimp observer manual GOM shrimp areas","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/areafunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratum designations from Scott-Denton paper, and shrimp observer manual for GOM shrimp areas — areafunc","text":"","code":"areafunc(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/as.numeric2.html","id":null,"dir":"Reference","previous_headings":"","what":"as.numeric2 — as.numeric2","title":"as.numeric2 — as.numeric2","text":".numeric2","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/as.numeric2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.numeric2 — as.numeric2","text":"","code":"as.numeric2(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch estimation using design-based estimators — bycatchDesign","title":"Bycatch estimation using design-based estimators — bycatchDesign","text":"Produces estimates bycatch using design-based ratio estimator delta estimator, option pooling across stratification variables.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bycatch estimation using design-based estimators — bycatchDesign","text":"","code":"bycatchDesign(   setupObj = setupObj,   designScenario,   designMethods = \"Ratio\",   designVars = \"Year\",   groupVar = \"Year\",   designPooling = FALSE,   poolTypes = NULL,   pooledVar = NULL,   adjacentNum = NULL,   minStrataUnit = 1,   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bycatch estimation using design-based estimators — bycatchDesign","text":"setupObj object produced bycatchSetup. designScenario Short name, e.g. noPool, Pool1, distinguish outputs made setupObj. designMethods Character vector methods use design based estimation. Current options Ratio Delta (delta-lognormal estimator). designVars Specify strata must included design based estimates, order across data pooled. Order variables determines order pooling occur. groupVar Specify variable keep separate summaries. Defaults Year. Put \"NA\" summarize whole dataset designPooling TRUE design-based estimates pooled strata missing data poolTypes Type pooling variable designVars, character vector order. Options \"none\", data pooled variable, \"\" data pooled levels variable, \"pooledVar\" variable named pooledVar used pool, (currently year ) \"adjacent\" pool adjacent years. pooledVar Variables pool variable pooledVar previous line, character vector order designVars. Use NA variables pooling methods.  can used pool (example) months seasons pooling needed. adjacentNum Number adjacent years include adjacent pooling, numerical vector order designVars. NA anything year, order designVars. minStrataUnit smallest sample size strata defined designVars acceptable, sample units (e.g. trips); pooling occur. reportType Character. Choose type report produced. Options pdf, html (default) .","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchDesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bycatch estimation using design-based estimators — bycatchDesign","text":"","code":"if (FALSE) { # \\dontrun{ library(BycatchEstimator) #------------------------------------------------- #Step 1. Run the datasetup function and review data inputs setupObj<-bycatchSetup( obsdat = obsdatExample, logdat = logdatExample, yearVar = \"Year\", obsEffort = \"sampled.sets\", logEffort = \"sets\", obsCatch = \"Catch\", catchUnit = \"number\", catchType = \"dead discard\", logNum = NA, sampleUnit = \"trips\", factorVariables = c(\"Year\",\"season\"), numericVariables = NA, EstimateBycatch = TRUE, runName = \"SimulatedExample\", runDescription = \"Example with simulated data\", common = \"Simulated species\", sp = \"Genus species\", reportType = \"html\" )  #------------- #Step 2. Design-based estimators (with pooling) bycatchDesign( setupObj = setupObj, designScenario = \"noPool\", designMethods = c(\"Ratio\", \"Delta\"), designVars = c(\"Year\",\"season\"), groupVar = \"Year\", designPooling = TRUE, poolTypes=c(\"adjacent\",\"all\"), pooledVar=c(NA,NA), adjacentNum=c(1,NA), minStrataUnit = 1 )} # }"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch estimation using model-based estimators — bycatchFit","title":"Bycatch estimation using model-based estimators — bycatchFit","text":"Produces model-based estimates bycatch annual abundance index.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bycatch estimation using model-based estimators — bycatchFit","text":"","code":"bycatchFit(   setupObj,   modelScenario,   complexModel,   simpleModel,   indexModel = NULL,   modelTry = c(\"Delta-Lognormal\", \"Delta-Gamma\", \"TMBnbinom1\", \"TMBnbinom2\",     \"TMBtweedie\"),   randomEffects = NULL,   randomEffects2 = NULL,   selectCriteria = \"BIC\",   DoCrossValidation = FALSE,   CIval = 0.05,   VarCalc = \"Simulate\",   includeObsCatch = FALSE,   matchColumn = NULL,   EstimateIndex = FALSE,   useParallel = TRUE,   nSims = 1000,   plotValidation = FALSE,   trueVals = NULL,   trueCols = NULL,   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bycatch estimation using model-based estimators — bycatchFit","text":"setupObj object produced bycatchSetup. modelScenario Short descriptor model setup, eg. \"s1\", output files different run one scenario one setupObj. complexModel Specify stats::formula. Specify complex simplest model considered. code find compare intermediate models using information criteria. Include fixed effects. simpleModel Specify stats::formula. model includes variables must final bycatch estimation model indexModel Specify stats::formula. Use indexModel specify strata keep separate calculating abundance indices. modelTry Specify observation error models try. Options : \"Binomial\", \"Normal\",\"Lognormal\",\"Poisson\", \"Delta-Lognormal\", \"Delta-Gamma\", models using lm glm functions, \"NegBin\" Negative binomial using glm.nb MASS library, \"Tweedie\" Tweedie GLM cpglm function cplm library, \"TMBbinomial\",\"TMBnormal\", \"TMBlognormal\",\"TMBpoisson\" , \"TMBdelta-Lognormal\",\"TMBdelta-Gamma\", \"TMBnbinom1\", \"TMBnbinom2\", \"TMBtweedie\" corresponding models glmmTMB library. Binomial TMBbinomial run automatically part delta models selected. randomEffects Character vector. Random effects included non-delta binomial models, character vector (e.g. \"Year:area\" include Year:area random effect). Null none. Note random effects included models. code evaluate whether included. randomEffects2 Character vector. Random effects included positive catch component delta models, character vector (e.g. \"Year:area\" include Year:area random effect). Null none. Note random effects included models. code evaluate whether included. selectCriteria Character. Model selection criteria. Options AICc, AIC BIC DoCrossValidation Specify whether run 10 fold cross-validation (TRUE FALSE). may work small unbalanced dataset CIval Specify confidence interval total bycatch estimates. alpha level, e.g. 0.05 95% VarCalc Character. Variance calculation method. Options : \"Simulate\",\"DeltaMethod\", \"None\".  Simulate work large number sample units logbook data. delta method variance calculation implemented delta-lognormal delta-gamma methods. includeObsCatch Logical. Set TRUE (1) observed sample units can matched logbook sample units (2) want calculate total bycatch observed bycatch plus predicted unobserved bycatch. work aggregated logbook effort. matchColumn Character. includeObsCatch TRUE, give name column matches sample units observer logbook data. Otherwise, can NA EstimateIndex Logical. like estimate? may calculate either annual abundance index, total bycatch, . useParallel Logical. Whether conduct analysis using parallel processing. initialized two cores available. nSims Number simulations used calculate confidence intervals. Ignored VarCalc set \"None\" plotValidation Logical. true values total bycatch (example simulation study), make plotValidation = TRUE fill rest specification (trueVals trueCols). trueVals data set contains true simulated total catches year. trueCols column true simulated catches contains true bycatch year reportType Character. Choose type report produced. Options pdf, html (default) .","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bycatch estimation using model-based estimators — bycatchFit","text":"","code":"if (FALSE) { # \\dontrun{ library(BycatchEstimator) #------------------------------------------------- #Step 1. Run the datasetup function and review data inputs setupObj<-bycatchSetup( obsdat = obsdatExample, logdat = logdatExample, yearVar = \"Year\", obsEffort = \"sampled.sets\", logEffort = \"sets\", obsCatch = \"Catch\", catchUnit = \"number\", catchType = \"dead discard\", logNum = NA, sampleUnit = \"trips\", factorVariables = c(\"Year\",\"season\"), numericVariables = NA, EstimateBycatch = TRUE, baseDir = getwd(), runName = \"SimulatedExample\", runDescription = \"Example with simulated data\", common = \"Simulated species\", sp = \"Genus species\", reportType = \"html\" )  ------------- #Step 2. Model fitting bycatchFit( setupObj = setupObj, modelScenario = \"s1\", complexModel = formula(y~(Year+season)^2), simpleModel = formula(y~Year), indexModel = formula(y~Year), modelTry = c(\"Delta-Lognormal\",\"TMBnbinom2\"), randomEffects = NULL, randomEffects2 = NULL, selectCriteria = \"BIC\", DoCrossValidation = TRUE, CIval = 0.05, VarCalc = \"Simulate\", includeObsCatch=FALSE, matchColumn=NULL, EstimateIndex=FALSE, useParallel = TRUE, nSims = 100, plotValidation = FALSE, trueVals = NULL, trueCols = NULL )} # }"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Bycatch estimation data setup — bycatchSetup","title":"Bycatch estimation data setup — bycatchSetup","text":"Sets global conditions, makes preliminary data summary data checks (make plots tables data).","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bycatch estimation data setup — bycatchSetup","text":"","code":"bycatchSetup(   obsdat,   logdat,   yearVar,   obsEffort,   logEffort,   obsCatch,   catchUnit,   catchType,   logNum = NA,   sampleUnit,   factorVariables,   numericVariables,   EstimateBycatch = TRUE,   baseDir = getwd(),   runName,   runDescription,   common,   sp,   reportType = \"html\" )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bycatch estimation data setup — bycatchSetup","text":"obsdat Observer data set logdat Logbook data set yearVar Character. column name year variable obsdat logdat. input files must contain variable name year. obsEffort Character. column name effort variable obsdat. variable must effort units logEffort logEffort Character. column name effort variable logdat. Optional used estimating bycatch. variable must effort units obsEffort obsCatch Character vector. name column(s) obsdat contain catch. vector, order variable names must follow order names provided common sp catchUnit Character vector. Give units catch (e.g., number) go plot labels. Must vector length sp catchType Character vector. Give type catch (e.g., dead discards) go plot labels. Must vector length sp logNum Character vector. name column logdat gives number sample units (e.g., trips sets). logbook data aggregated (.e. row sample unit) set value NA sampleUnit Character. sample unit logdat? e.g. sets trips. factorVariables Character vector. Specify variables interpreted categorical, ensuring factor format variables. variables must identical names factor levels obsdat logdat numericVariables Character vector. Specify variables interpreted numeric. variables must identical names obsdat logdat. numeric variables, set numericVariables=NA. EstimateBycatch Logical. Defaults TRUE. TRUE, must provide logbook data source total effort logdat. FALSE produced data summaries obsdat . baseDir Character. directory save output. Defaults current working directory. runName Characer. Give name run, used set directory outputs runDescription Character. Brief summary run, used set directory outputs common Character vector. Provide common name species used output filess. Can vector names multiple species time. sp Character vector. Provide scientific name species used output files. Can vector names multiple species time reportType Character. Choose type report produced. Options html (default), pdf .","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/bycatchSetup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bycatch estimation data setup — bycatchSetup","text":"","code":"if (FALSE) { # \\dontrun{ library(BycatchEstimator) setupObj<-bycatchSetup( obsdat = obsdatExample, logdat = logdatExample, yearVar = \"Year\", obsEffort = \"sampled.sets\", logEffort = \"sets\", obsCatch = \"Catch\", catchUnit = \"number\", catchType = \"dead discard\", logNum = NA, sampleUnit = \"trips\", factorVariables = c(\"Year\",\"season\"), numericVariables = NA, EstimateBycatch = TRUE, baseDir = getwd(), runName = \"SimulatedExample\", runDescription = \"Example with simulated data\", common = \"Simulated species\", sp = \"Genus species\", reportType = \"html\" )} # }"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Pennington(1983) method mean — deltaEstimatorMean","title":"Function for Pennington(1983) method mean — deltaEstimatorMean","text":"Output mean delta estimator","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Pennington(1983) method mean — deltaEstimatorMean","text":"","code":"deltaEstimatorMean(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Pennington(1983) method mean — deltaEstimatorMean","text":"x vector data input","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorSE2.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Pennington(1983) method SE of the mean squAred — deltaEstimatorSE2","title":"Function for Pennington(1983) method SE of the mean squAred — deltaEstimatorSE2","text":"Output SE squared delta estimator","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorSE2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Pennington(1983) method SE of the mean squAred — deltaEstimatorSE2","text":"","code":"deltaEstimatorSE2(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorSE2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Pennington(1983) method SE of the mean squAred — deltaEstimatorSE2","text":"x vector data input","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Pennington(1983) method variance — deltaEstimatorVar","title":"Function for Pennington(1983) method variance — deltaEstimatorVar","text":"Output variance delta estimator","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Pennington(1983) method variance — deltaEstimatorVar","text":"","code":"deltaEstimatorVar(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/deltaEstimatorVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Pennington(1983) method variance — deltaEstimatorVar","text":"x vector data input","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find best model by information criteria, by model type — findBestModelFunc","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"Function find best model information criteria, model type","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"","code":"findBestModelFunc(   obsdatval,   modType,   requiredVarNames,   allVarNames,   complexModel,   randomEffects = NULL,   useParallel,   selectCriteria,   varExclude,   printOutput = FALSE,   catchType = NULL,   common = NULL,   dirname = NULL,   run = NULL,   modelScenario = NULL,   shortName = NULL )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/findBestModelFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find best model by information criteria, by model type — findBestModelFunc","text":"obsdatval Value modType Value requiredVarNames Value allVarNames Value complexModel Value randomEffects Value useParallel Value selectCriteria Value varExclude Value printOutput Value catchType Value common Value dirname Value run Value modelScenario Value shortName Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/fishTimeFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","title":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","text":"Function calculate number hours fished day counted first set last haul fishTimeFunc","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/fishTimeFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate number of hours fished in each day counted as first set to last haul — fishTimeFunc","text":"","code":"fishTimeFunc(timeout, timein, prop.sampled = 1)  fishTimeFunc(timeout, timein, prop.sampled = 1)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getDesignEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to make design based estimates of bycatch from the ratio estimator of Pennington Delta estimator, pooling as needed for strata missing data. stratification defined by designVars, then aggregated to strataVars — getDesignEstimates","title":"Function to make design based estimates of bycatch from the ratio estimator of Pennington Delta estimator, pooling as needed for strata missing data. stratification defined by designVars, then aggregated to strataVars — getDesignEstimates","text":"Function make design based estimates bycatch ratio estimator Pennington Delta estimator, pooling needed strata missing data. stratification defined designVars, aggregated strataVars","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getDesignEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to make design based estimates of bycatch from the ratio estimator of Pennington Delta estimator, pooling as needed for strata missing data. stratification defined by designVars, then aggregated to strataVars — getDesignEstimates","text":"","code":"getDesignEstimates(   obsdatval,   logdatval,   strataVars,   designVars = NULL,   designPooling,   minStrataUnit = 1,   startYear,   poolingSum = NULL,   includePool = NULL )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getDesignEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to make design based estimates of bycatch from the ratio estimator of Pennington Delta estimator, pooling as needed for strata missing data. stratification defined by designVars, then aggregated to strataVars — getDesignEstimates","text":"obsdatval Value logdatval Value strataVars Value designVars Value designPooling Value minStrataUnit Value startYear Value poolingSum Value includePool Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getME.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean error — getME","title":"Calculate mean error — getME","text":"Calculate mean error","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean error — getME","text":"","code":"getME(yhat, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getModelSummaryTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a table of model parameters and summaries — getModelSummaryTable","title":"Return a table of model parameters and summaries — getModelSummaryTable","text":"Return table model parameters summaries","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getModelSummaryTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a table of model parameters and summaries — getModelSummaryTable","text":"","code":"getModelSummaryTable(modfits, modTypes)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getModelSummaryTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a table of model parameters and summaries — getModelSummaryTable","text":"modfits list fitted model objects modTypes corresponding vector model types specified modelTry","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getPooling.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to setup pooling if requested for design estimators — getPooling","title":"Function to setup pooling if requested for design estimators — getPooling","text":"Function setup pooling requested design estimators","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getPooling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to setup pooling if requested for design estimators — getPooling","text":"","code":"getPooling(   obsdatval,   logdatval,   minStrataUnit,   designVars,   pooledVar,   poolTypes,   adjacentNum )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getPooling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to setup pooling if requested for design estimators — getPooling","text":"obsdatval Value logdatval Value minStrataUnit Value designVars Value pooledVar Value poolTypes Value adjacentNum Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RMSE — getRMSE","title":"Calculate RMSE — getRMSE","text":"Calculate RMSE","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RMSE — getRMSE","text":"","code":"getRMSE(yhat, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find range of a numerical variable — getRange","title":"Function to find range of a numerical variable — getRange","text":"Function find range numerical variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find range of a numerical variable — getRange","text":"","code":"getRange(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"Generate mean standard error predictions delta lognormal simulation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"","code":"getSimDeltaLN(modfitBin, modfitLnorm, df1, nsim = 10000)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimDeltaLN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mean and standard error of predictions for delta lognormal by simulation — getSimDeltaLN","text":"modfitBin Value modfitLnorm Value df1 Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"Generate standard errors predictions simulation regression coefficients var/covar matrix","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"","code":"getSimSE(modfit, df1, transFunc = \"none\", offsetval = NULL, nsim)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getSimSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors of predictions from simulation from regression coefficients and their var/covar matrix — getSimSE","text":"modfit Value df1 Value transFunc Value offsetval Value nsim Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"Function convert data excel format date time separated blank R format date","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"","code":"getdatefunc(x, dateformat = \"%m/%d/%Y\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc","text":"x data dateformat Date format, default %m/%d/%Y.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":null,"dir":"Reference","previous_headings":"","what":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"Function 2 convert data excel format date time separated blank R format date","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"","code":"getdatefunc2(x, dateformat = \"%d%b%Y\")"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/getdatefunc2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function 2 to convert data in excel format with date and time separated by a blank into an R format date — getdatefunc2","text":"x data dateformat Date format, default %d%b%Y.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time in excel format — gettimefunc2","title":"Convert time in excel format — gettimefunc2","text":"Convert time excel format","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time in excel format — gettimefunc2","text":"","code":"gettimefunc2(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/gettimefunc2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time in excel format — gettimefunc2","text":"x data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/goodman.var.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","title":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","text":"Exact variance product two independent variables, Goodman (1960)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/goodman.var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact variance of the product of two independent variables, from Goodman (1960) — goodman.var","text":"","code":"goodman.var(x, y)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ilogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse logit — ilogit","title":"Inverse logit — ilogit","text":"Inverse logit","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ilogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse logit — ilogit","text":"","code":"ilogit(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/length.unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to count the number of unique levels in a vector — length.unique","title":"Function to count the number of unique levels in a vector — length.unique","text":"Function count number unique levels vector","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/length.unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to count the number of unique levels in a vector — length.unique","text":"","code":"# S3 method for class 'unique' length(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","title":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","text":"Calculate lognormal mean standard error normal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lognormal mean and standard error from normal mean and se — lnorm.mean","text":"","code":"lnorm.mean(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.se.html","id":null,"dir":"Reference","previous_headings":"","what":"lnorm.se — lnorm.se","title":"lnorm.se — lnorm.se","text":"lnorm.se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lnorm.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lnorm.se — lnorm.se","text":"","code":"lnorm.se(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of a product from Lo et al. (1992) — lo.se","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"Variance product Lo et al. (1992)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"","code":"lo.se(x1, x1e, x2, x2e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/lo.se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of a product from Lo et al. (1992) — lo.se","text":"x1 Value x1e Value x2 Value x2e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/loadOutputs.html","id":null,"dir":"Reference","previous_headings":"","what":"loadOutputs — loadOutputs","title":"loadOutputs — loadOutputs","text":"Reads R objects created runs bycatchEstimator analysis","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/loadOutputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"loadOutputs — loadOutputs","text":"","code":"loadOutputs(   baseDir = getwd(),   runName,   runDate = Sys.Date(),   designScenarios = NULL,   modelScenarios = NULL )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/loadOutputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"loadOutputs — loadOutputs","text":"baseDir base directory runs, bycatchSetup. runName run name, bycatchSetup. runDate date model run. Defaults current date, can set read models previously run. designScenarios Character vector designScenario values original run. NULL read design-based results. modelScenarios Character vector modelScenario values original run.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/loadOutputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"loadOutputs — loadOutputs","text":"Returns list setupObj specified run, list called designObjList contains design-based model inputs outputs designScneario, modelObjList, models modelScenarios, data frame called allYearEstimates annual estimates across design-based model-based scenarios format suitable ggplot.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Logbook simple example data set — logdatExample","title":"Logbook simple example data set — logdatExample","text":"Example data set logbook. Can used run bycatch estimation procedure along observer example data set.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logbook simple example data set — logdatExample","text":"","code":"logdatExample"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Logbook simple example data set — logdatExample","text":"tibble 5 columns. EW East/West spatial grouping variable season season temporal grouping variable Year Year variable sets effort variable e.g., e.g. 1000 hook hours trips Number sample units record, trips example. example logbook data aggregated, thus row 1 trip","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/logdatExample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Logbook simple example data set — logdatExample","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get an abundance index with SE — makeIndexVar","title":"Function to get an abundance index with SE — makeIndexVar","text":"Function get abundance index SE","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get an abundance index with SE — makeIndexVar","text":"","code":"makeIndexVar(   modfit1,   modfit2 = NULL,   modType,   indexVarNames,   newdat,   nsims,   printOutput = FALSE,   catchType = NULL,   common = NULL,   shortName = NULL,   dirname = NULL,   run = NULL,   modelScenario )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makeIndexVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get an abundance index with SE — makeIndexVar","text":"modfit1 Value modfit2 Value modType Value newdat Value nsims Value printOutput Value catchType Value common Value shortName Value dirname Value run Value modelScenario Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"Function predict CPUE without variances get predictions quickly cross validation","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"","code":"makePredictions(modfit1, modfit2 = NULL, modType, newdat, obsdatval = NULL)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to predict CPUE without variances to get predictions quickly for cross validation — makePredictions","text":"modfit1 Value modfit2 Value modType Value newdat Value obsdatval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"Generate standard errors confidence intervals predictions delta-method separately year","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"","code":"makePredictionsDeltaVar(   modfit1,   newdat,   modtype,   obsdatval,   includeObsCatch,   requiredVarNames,   CIval,   printOutput = TRUE,   catchType,   common,   shortName,   dirname,   run,   modelScenario,   startYear )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsDeltaVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions with delta-method separately by year — makePredictionsDeltaVar","text":"modfit1 Value newdat Value modtype Value obsdatval Value includeObsCatch Value requiredVarNames Value CIval Value printOutput Value catchType Value common Value shortName value dirname Value run Value modelScenario Value startYear Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate predictions without estimating variance — makePredictionsNoVar","title":"Generate predictions without estimating variance — makePredictionsNoVar","text":"Generate predictions without estimating variance","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate predictions without estimating variance — makePredictionsNoVar","text":"","code":"makePredictionsNoVar(   modfit1,   modfit2 = NULL,   modtype,   newdat,   obsdatval = NULL,   nsims,   includeObsCatch,   requiredVarNames,   printOutput = TRUE,   catchType,   common,   shortName,   dirname,   run,   modelScenario,   startYear )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsNoVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate predictions without estimating variance — makePredictionsNoVar","text":"modfit1 Value modfit2 Value modtype Value newdat Value obsdatval Value includeObsCatch Value requiredVarNames Value printOutput Value catchType Value common Value shortName Value dirname Value run Value modelScenario Value startYear Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"Generate standard errors confidence intervals predictions simulation regression coefficients var/covar matrix","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"","code":"makePredictionsSimVarBig(   modfit1,   modfit2 = NULL,   newdat,   modtype,   obsdatval,   includeObsCatch,   nsim,   requiredVarNames,   CIval,   printOutput = TRUE,   catchType,   common,   shortName,   dirname,   run,   randomEffects,   randomEffects2,   modelScenario,   startYear )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/makePredictionsSimVarBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate standard errors and confidence intervals of predictions from simulation from regression coefficients and their var/covar matrix — makePredictionsSimVarBig","text":"modfit1 Value modfit2 Value newdat Value modtype Value obsdatval Value includeObsCatch Value nsim Value requiredVarNames Value CIval Value printOutput Value catchType Value common Value shortName Value dirname Value run Value randomEffects Value randomEffects2 Value modelScenario Value startYear Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find mode of a categorical variable — mostfreqfunc","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"Function find mode categorical variable","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"","code":"mostfreqfunc(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/mostfreqfunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find mode of a categorical variable — mostfreqfunc","text":"x value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate normal mean from lognormal mean and se — norm.mean","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"Calculate normal mean lognormal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"","code":"norm.mean(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate normal mean from lognormal mean and se — norm.mean","text":"x1 Value x1e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard error from lognormal mean and se — norm.se","title":"Calculate standard error from lognormal mean and se — norm.se","text":"Calculate standard error lognormal mean se","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard error from lognormal mean and se — norm.se","text":"","code":"norm.se(x1, x1e)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/norm.se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard error from lognormal mean and se — norm.se","text":"x1 Value x1e Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Observer simple example data set — obsdatExample","title":"Observer simple example data set — obsdatExample","text":"Example data set logbook. Can used run bycatch estimation procedure along observer example data set.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observer simple example data set — obsdatExample","text":"","code":"obsdatExample"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Observer simple example data set — obsdatExample","text":"tibble 5 columns. EW East/West spatial grouping variable season season temporal grouping variable Year Year variable sampled.sets effort variable e.g., e.g. 1000 hook hours Catch Bycatch species numbers caught","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/obsdatExample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Observer simple example data set — obsdatExample","text":"Simulated data","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"Function count outliers, defined numSD standard deviations mean.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"","code":"outlierCountFunc(x, numSD = 8)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/outlierCountFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to count outliers, defined as more than numSD standard deviations from the mean. — outlierCountFunc","text":"x Value numSD Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"Function plot boxplots RMSE across folds","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"","code":"plotCrossVal(rmse, me, fileName)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotCrossVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot boxplots of RMSE and ME across folds — plotCrossVal","text":"rmse Value Value fileName Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot abundance index plus minus standard error — plotIndex","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"Function plot abundance index plus minus standard error","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"","code":"plotIndex(   yearpred,   modType,   fileName,   subtext = \"\",   indexVarNames,   allVarNames,   startYear,   common,   run,   catchType,   catchUnit )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot abundance index plus minus standard error — plotIndex","text":"yearpred Value modType Value fileName Value subtext Value indexVarNames Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"Function plot either total positive trips (binomial) total catch/bycatch (models)","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"","code":"plotSums(   yearpred,   modType,   fileName,   subtext = \"\",   allVarNames,   startYear,   common,   run,   catchType,   catchUnit,   VarCalc )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot either total positive trips (binomial) or total catch/bycatch (all other models) — plotSums","text":"yearpred Value modType Value fileName Value subtext Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot total catch by all models plus a validation number — plotSumsValidate","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"Function plot total catch models plus validation number","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"","code":"plotSumsValidate(   yearpred,   trueval,   fileName,   colName,   allVarNames,   startYear,   common,   run,   catchType,   catchUnit,   VarCalc )"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/plotSumsValidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot total catch by all models plus a validation number — plotSumsValidate","text":"yearpred Value trueval Value fileName Value colName Value allVarNames Value startYear Value common Value run Value catchType Value catchUnit Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic ratio estimator with variance (Cochran) — ratio.func","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"Output mean standard error bycatch stratum total bycatch SE. Assumes unobserved strata zero catch","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"","code":"ratio.func(x, y, g, X, N, G)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratio.func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic ratio estimator with variance (Cochran) — ratio.func","text":"x x, y g vectors giving effort/catch, bycatch stratum observed sample unit. y x, y g vectors giving effort/catch, bycatch stratum observed sample unit. g x, y g vectors giving effort/catch, bycatch stratum observed sample unit. X X total effort/catch stratum N N total number sample units stratum, available, otherwise total effort G Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"Variables x=sum(obs Effort),X=sum(log Effort), n=observed sample units. N=log sample units, Rhat=mean(obs Catch)/mean(obs Effort), sx2, sy2, sxy observed variance effort catch, covariance","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"","code":"ratioVar(x, X, n, N, Rhat, sx2, sy2, sxy)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/ratioVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance of ratio estimator, from data already summarized by strata — ratioVar","text":"x Value X Value n Value N Value Rhat Value sx2 Value sy2 Value sxy Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/seasonfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","title":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","text":"Function convert months 2, 3 4 6 numbered seasons","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/seasonfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert months into 2, 3 4 or 6 numbered seasons — seasonfunc","text":"","code":"seasonfunc(month, numseason = 4)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateGammaDraw — simulateGammaDraw","title":"simulateGammaDraw — simulateGammaDraw","text":"simulateGammaDraw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateGammaDraw — simulateGammaDraw","text":"","code":"simulateGammaDraw(modfit, nObs, b, NewRandomVals)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateGammaDraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateGammaDraw — simulateGammaDraw","text":"modfit Value nObs Value b Value NewRandomVals Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateNegBin1Draw — simulateNegBin1Draw","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"simulateNegBin1Draw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"","code":"simulateNegBin1Draw(modfit, nObs, b, Effort, NewRandomVals = 0)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBin1Draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateNegBin1Draw — simulateNegBin1Draw","text":"modfit Value nObs Value b Value Effort Value NewRandomVals Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"Function simulate DHARMa residuals negative binomial GAM GLM","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"","code":"simulateNegBinGam(modfit, nsims = 250, offsetval = 1)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateNegBinGam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to simulate DHARMa residuals from a negative binomial GAM or GLM — simulateNegBinGam","text":"modfit Value nsims Value offsetval Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":null,"dir":"Reference","previous_headings":"","what":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"simulateTMBTweedieDraw","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"","code":"simulateTMBTweedieDraw(modfit, nObs, b, Effort, NewRandomVals = 0)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTMBTweedieDraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulateTMBTweedieDraw — simulateTMBTweedieDraw","text":"modfit Value nObs Value b Value Effort Value NewRandomVals Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"Generate simulations use input DHARMa residual calculations Tweedie cpglm.","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"","code":"simulateTweedie(modfit1, nsims)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/simulateTweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate simulations to use as input to DHARMa residual calculations for the Tweedie from cpglm. — simulateTweedie","text":"modfit1 Value nsims Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard error of a mean — standard.error","title":"Standard error of a mean — standard.error","text":"Standard error mean","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard error of a mean — standard.error","text":"","code":"standard.error(x)"},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/standard.error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard error of a mean — standard.error","text":"x Value","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/yearfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to group the specified number of years together, starting from the last year — yearfunc","title":"Function to group the specified number of years together, starting from the last year — yearfunc","text":"Function group specified number years together, starting last year","code":""},{"path":"https://ebabcock.github.io/BycatchEstimator/reference/yearfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to group the specified number of years together, starting from the last year — yearfunc","text":"","code":"yearfunc(year, numyears = 1)"}]
